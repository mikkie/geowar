(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _statesBootJs = require("./states/Boot.js");

var _statesBootJs2 = _interopRequireDefault(_statesBootJs);

var _statesPreloadJs = require("./states/Preload.js");

var _statesPreloadJs2 = _interopRequireDefault(_statesPreloadJs);

var _statesStartScreenJs = require("./states/StartScreen.js");

var _statesStartScreenJs2 = _interopRequireDefault(_statesStartScreenJs);

var _statesGameJs = require("./states/Game.js");

var _statesGameJs2 = _interopRequireDefault(_statesGameJs);

var game;

window.onload = function () {
                       game = new Phaser.Game(window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth, window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight, Phaser.AUTO, 'game');
                       game.state.add('boot', _statesBootJs2["default"]);
                       game.state.add('preload', _statesPreloadJs2["default"]);
                       game.state.add('startScreen', _statesStartScreenJs2["default"]);
                       game.state.add('game', _statesGameJs2["default"]);
                       game.state.start('boot');
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9hcHAuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs0QkFFaUIsa0JBQWtCOzs7OytCQUNmLHFCQUFxQjs7OzttQ0FDakIseUJBQXlCOzs7OzRCQUNoQyxrQkFBa0I7Ozs7QUFMbkMsSUFBSSxJQUFJLENBQUM7O0FBT1QsTUFBTSxDQUFDLE1BQU0sR0FBRyxZQUFZO0FBQzFCLDJCQUFJLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQ3RGLE1BQU0sQ0FBQyxXQUFXLElBQUksUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQ3pGLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDNUMsMkJBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sNEJBQU0sQ0FBQztBQUM1QiwyQkFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUywrQkFBUyxDQUFDO0FBQ2xDLDJCQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLG1DQUFhLENBQUM7QUFDMUMsMkJBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE1BQU0sNEJBQU0sQ0FBQztBQUM1QiwyQkFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7Q0FDMUIsQ0FBQyIsImZpbGUiOiJEOi9hcXVhL2dlb3dhci9zcmMvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGdhbWU7XG5cbmltcG9ydCBCb290IGZyb20gXCIuL3N0YXRlcy9Cb290LmpzXCI7XG5pbXBvcnQgUHJlbG9hZCBmcm9tIFwiLi9zdGF0ZXMvUHJlbG9hZC5qc1wiO1xuaW1wb3J0IFN0YXJ0U2NyZWVuIGZyb20gXCIuL3N0YXRlcy9TdGFydFNjcmVlbi5qc1wiO1xuaW1wb3J0IEdhbWUgZnJvbSBcIi4vc3RhdGVzL0dhbWUuanNcIjtcblxud2luZG93Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgZ2FtZSA9IG5ldyBQaGFzZXIuR2FtZSh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgZG9jdW1lbnQuYm9keS5jbGllbnRXaWR0aCwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQgfHwgZG9jdW1lbnQuYm9keS5jbGllbnRIZWlnaHQsIFxuICAgICAgICAgICAgICAgICAgICAgICAgIFBoYXNlci5BVVRPLCAnZ2FtZScpO1xuICBnYW1lLnN0YXRlLmFkZCgnYm9vdCcsQm9vdCk7XG4gIGdhbWUuc3RhdGUuYWRkKCdwcmVsb2FkJyxQcmVsb2FkKTtcbiAgZ2FtZS5zdGF0ZS5hZGQoJ3N0YXJ0U2NyZWVuJyxTdGFydFNjcmVlbik7XG4gIGdhbWUuc3RhdGUuYWRkKCdnYW1lJyxHYW1lKTtcbiAgZ2FtZS5zdGF0ZS5zdGFydCgnYm9vdCcpO1xufTtcbiJdfQ==
},{"./states/Boot.js":22,"./states/Game.js":23,"./states/Preload.js":24,"./states/StartScreen.js":25}],2:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _UtilsJs = require('./Utils.js');

var _UtilsJs2 = _interopRequireDefault(_UtilsJs);

var CanvasHelper = (function () {
    function CanvasHelper(canvas, json, colorSet) {
        _classCallCheck(this, CanvasHelper);

        this.canvas = canvas;
        this.texture = json;
        this.colorSet = colorSet;
    }

    _createClass(CanvasHelper, [{
        key: 'drawTexture',
        value: function drawTexture() {
            this.ctx = this.canvas.ctx;
            this.ctx.beginPath();
            for (var key in this.texture) {
                this.updateCtxProp(this.texture[key].ctxProp);
                for (var i in this.texture[key].draw) {
                    var part = this.texture[key].draw[i];
                    var x = this.parseExpress(part.x);
                    var y = this.parseExpress(part.y);
                    if (part.drawType == 'move') {
                        this.ctx.moveTo(x, y);
                    } else if (part.drawType == 'line') {
                        this.ctx.lineTo(x, y);
                    } else if (part.drawType == 'arc') {
                        var radius = this.parseExpress(part.radius);
                        var arc = this.parseExpress(part.arc);
                        this.ctx.arc(x, y, radius, 0, arc, false);
                    } else if (part.drawType == 'fillRect') {
                        var x = this.parseExpress(part.x);
                        var y = this.parseExpress(part.y);
                        var width = this.parseExpress(part.width);
                        var height = this.parseExpress(part.height);
                        this.ctx.fillRect(x, y, width, height);
                    }
                }
                this.ctx.closePath();
                if (this.texture[key].style == 'stroke') {
                    this.ctx.strokeStyle = this.getColor(key);
                    this.ctx.stroke();
                } else if (this.texture[key].style == 'fill') {
                    this.ctx.fillStyle = this.getColor(key);
                    this.ctx.fill();
                }
            }
        }
    }, {
        key: 'updateCtxProp',
        value: function updateCtxProp(ctxProp) {
            if (ctxProp) {
                for (var k in ctxProp) {
                    this.ctx[k] = ctxProp[k];
                }
            }
        }
    }, {
        key: 'getColor',
        value: function getColor(key) {
            if (this.colorSet && this.colorSet[key]) {
                return this.colorSet[key];
            }
            return _UtilsJs2['default'].generateRandomColor();
        }
    }, {
        key: 'parseExpress',
        value: function parseExpress(pos) {
            if (/\$\{.*\}/.test(pos)) {
                pos = pos.replace(/canvas.height/gi, this.canvas.height).replace(/canvas.width/gi, this.canvas.width);
                pos = pos.substring(2, pos.length - 1);
                pos = eval(pos);
                return pos;
            }
            return pos;
        }
    }]);

    return CanvasHelper;
})();

exports['default'] = CanvasHelper;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9jb21tb24vQ2FudmFzSGVscGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozt1QkFBa0IsWUFBWTs7OztJQUVULFlBQVk7QUFFbEIsYUFGTSxZQUFZLENBRWpCLE1BQU0sRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFOzhCQUZuQixZQUFZOztBQUd6QixZQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUNyQixZQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNwQixZQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztLQUM1Qjs7aUJBTmdCLFlBQVk7O2VBUWxCLHVCQUFHO0FBQ1YsZ0JBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7QUFDM0IsZ0JBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDckIsaUJBQUssSUFBSSxHQUFHLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtBQUMxQixvQkFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQzlDLHFCQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFO0FBQ2xDLHdCQUFJLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNyQyx3QkFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsd0JBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDLHdCQUFJLElBQUksQ0FBQyxRQUFRLElBQUksTUFBTSxFQUFFO0FBQ3pCLDRCQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7cUJBQ3pCLE1BQ0ksSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLE1BQU0sRUFBRTtBQUM5Qiw0QkFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO3FCQUN6QixNQUNJLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxLQUFLLEVBQUU7QUFDN0IsNEJBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVDLDRCQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN0Qyw0QkFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztxQkFDN0MsTUFDSSxJQUFHLElBQUksQ0FBQyxRQUFRLElBQUksVUFBVSxFQUFDO0FBQ2hDLDRCQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsQyw0QkFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEMsNEJBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzFDLDRCQUFJLE1BQU0sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUM1Qyw0QkFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUM7cUJBQzFDO2lCQUNKO0FBQ0Qsb0JBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLENBQUM7QUFDckIsb0JBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksUUFBUSxFQUFFO0FBQ3JDLHdCQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzFDLHdCQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUNyQixNQUNJLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLElBQUksTUFBTSxFQUFFO0FBQ3hDLHdCQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLHdCQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDO2lCQUNuQjthQUNKO1NBQ0o7OztlQUdZLHVCQUFDLE9BQU8sRUFBRTtBQUNuQixnQkFBSSxPQUFPLEVBQUU7QUFDVCxxQkFBSyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUU7QUFDbkIsd0JBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUM1QjthQUNKO1NBQ0o7OztlQUlPLGtCQUFDLEdBQUcsRUFBRTtBQUNWLGdCQUFJLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUNyQyx1QkFBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQzdCO0FBQ0QsbUJBQU8scUJBQU0sbUJBQW1CLEVBQUUsQ0FBQztTQUN0Qzs7O2VBR1csc0JBQUMsR0FBRyxFQUFFO0FBQ2QsZ0JBQUksVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtBQUN0QixtQkFBRyxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN0RyxtQkFBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDdkMsbUJBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDaEIsdUJBQU8sR0FBRyxDQUFDO2FBQ2Q7QUFDRCxtQkFBTyxHQUFHLENBQUE7U0FDYjs7O1dBM0VnQixZQUFZOzs7cUJBQVosWUFBWSIsImZpbGUiOiJEOi9hcXVhL2dlb3dhci9zcmMvY29tbW9uL0NhbnZhc0hlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlscyBmcm9tICcuL1V0aWxzLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FudmFzSGVscGVyIHtcblxuICAgIGNvbnN0cnVjdG9yKGNhbnZhcywganNvbiwgY29sb3JTZXQpIHtcbiAgICAgICAgdGhpcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIHRoaXMudGV4dHVyZSA9IGpzb247XG4gICAgICAgIHRoaXMuY29sb3JTZXQgPSBjb2xvclNldDtcbiAgICB9XG5cbiAgICBkcmF3VGV4dHVyZSgpIHtcbiAgICAgICAgdGhpcy5jdHggPSB0aGlzLmNhbnZhcy5jdHg7XG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy50ZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN0eFByb3AodGhpcy50ZXh0dXJlW2tleV0uY3R4UHJvcCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpIGluIHRoaXMudGV4dHVyZVtrZXldLmRyYXcpIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHRoaXMudGV4dHVyZVtrZXldLmRyYXdbaV07XG4gICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLnBhcnNlRXhwcmVzcyhwYXJ0LngpO1xuICAgICAgICAgICAgICAgIHZhciB5ID0gdGhpcy5wYXJzZUV4cHJlc3MocGFydC55KTtcbiAgICAgICAgICAgICAgICBpZiAocGFydC5kcmF3VHlwZSA9PSAnbW92ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHgubW92ZVRvKHgsIHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChwYXJ0LmRyYXdUeXBlID09ICdsaW5lJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5saW5lVG8oeCwgeSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHBhcnQuZHJhd1R5cGUgPT0gJ2FyYycpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl1cyA9IHRoaXMucGFyc2VFeHByZXNzKHBhcnQucmFkaXVzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyYyA9IHRoaXMucGFyc2VFeHByZXNzKHBhcnQuYXJjKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdHguYXJjKHgsIHksIHJhZGl1cywgMCwgYXJjLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYocGFydC5kcmF3VHlwZSA9PSAnZmlsbFJlY3QnKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSB0aGlzLnBhcnNlRXhwcmVzcyhwYXJ0LngpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IHRoaXMucGFyc2VFeHByZXNzKHBhcnQueSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3aWR0aCA9IHRoaXMucGFyc2VFeHByZXNzKHBhcnQud2lkdGgpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5wYXJzZUV4cHJlc3MocGFydC5oZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN0eC5maWxsUmVjdCh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLnRleHR1cmVba2V5XS5zdHlsZSA9PSAnc3Ryb2tlJykge1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5nZXRDb2xvcihrZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LnN0cm9rZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy50ZXh0dXJlW2tleV0uc3R5bGUgPT0gJ2ZpbGwnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdHguZmlsbFN0eWxlID0gdGhpcy5nZXRDb2xvcihrZXkpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3R4LmZpbGwoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgdXBkYXRlQ3R4UHJvcChjdHhQcm9wKSB7XG4gICAgICAgIGlmIChjdHhQcm9wKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBrIGluIGN0eFByb3ApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN0eFtrXSA9IGN0eFByb3Bba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG4gICAgZ2V0Q29sb3Ioa2V5KSB7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yU2V0ICYmIHRoaXMuY29sb3JTZXRba2V5XSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sb3JTZXRba2V5XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gVXRpbHMuZ2VuZXJhdGVSYW5kb21Db2xvcigpO1xuICAgIH1cblxuXG4gICAgcGFyc2VFeHByZXNzKHBvcykge1xuICAgICAgICBpZiAoL1xcJFxcey4qXFx9Ly50ZXN0KHBvcykpIHtcbiAgICAgICAgICAgIHBvcyA9IHBvcy5yZXBsYWNlKC9jYW52YXMuaGVpZ2h0L2dpLCB0aGlzLmNhbnZhcy5oZWlnaHQpLnJlcGxhY2UoL2NhbnZhcy53aWR0aC9naSwgdGhpcy5jYW52YXMud2lkdGgpO1xuICAgICAgICAgICAgcG9zID0gcG9zLnN1YnN0cmluZygyLCBwb3MubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICBwb3MgPSBldmFsKHBvcyk7XG4gICAgICAgICAgICByZXR1cm4gcG9zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwb3NcbiAgICB9XG5cbn0iXX0=
},{"./Utils.js":3}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Utils = (function () {
    function Utils() {
        _classCallCheck(this, Utils);
    }

    _createClass(Utils, null, [{
        key: 'generateRandomColor',
        value: function generateRandomColor() {
            var letters = '0123456789ABCDEF';
            var color = '#';
            for (var i = 0; i < 6; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
    }, {
        key: 'generateRandomNumber',
        value: function generateRandomNumber() {
            var letters = '0123456789ABCDEF';
            var color = '';
            for (var i = 0; i < 10; i++) {
                color += letters[Math.floor(Math.random() * 16)];
            }
            return color;
        }
    }]);

    return Utils;
})();

exports['default'] = Utils;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9jb21tb24vVXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixLQUFLO2FBQUwsS0FBSzs4QkFBTCxLQUFLOzs7aUJBQUwsS0FBSzs7ZUFDSSwrQkFBRztBQUN6QixnQkFBSSxPQUFPLEdBQUcsa0JBQWtCLENBQUM7QUFDakMsZ0JBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN4QixxQkFBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO0FBQ0QsbUJBQU8sS0FBSyxDQUFDO1NBQ2hCOzs7ZUFFMEIsZ0NBQUc7QUFDMUIsZ0JBQUksT0FBTyxHQUFHLGtCQUFrQixDQUFDO0FBQ2pDLGdCQUFJLEtBQUssR0FBRyxFQUFFLENBQUM7QUFDZixpQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUN6QixxQkFBSyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO2FBQ3BEO0FBQ0QsbUJBQU8sS0FBSyxDQUFDO1NBQ2hCOzs7V0FqQmdCLEtBQUs7OztxQkFBTCxLQUFLIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9jb21tb24vVXRpbHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlscyB7XG4gICAgc3RhdGljIGdlbmVyYXRlUmFuZG9tQ29sb3IoKSB7XG4gICAgICAgIHZhciBsZXR0ZXJzID0gJzAxMjM0NTY3ODlBQkNERUYnO1xuICAgICAgICB2YXIgY29sb3IgPSAnIyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNjsgaSsrKSB7XG4gICAgICAgICAgICBjb2xvciArPSBsZXR0ZXJzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDE2KV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgIH1cblxuICAgIHN0YXRpYyBnZW5lcmF0ZVJhbmRvbU51bWJlcigpIHtcbiAgICAgICAgdmFyIGxldHRlcnMgPSAnMDEyMzQ1Njc4OUFCQ0RFRic7XG4gICAgICAgIHZhciBjb2xvciA9ICcnO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgICAgICAgICAgIGNvbG9yICs9IGxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTYpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgfVxufSJdfQ==
},{}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _playersCirclePlayerJs = require('../players/CirclePlayer.js');

var _playersCirclePlayerJs2 = _interopRequireDefault(_playersCirclePlayerJs);

var AICirclePlayer = (function (_CirclePlayer) {
    _inherits(AICirclePlayer, _CirclePlayer);

    function AICirclePlayer(game, x, y, width, height, weaponFactory, colorSet) {
        _classCallCheck(this, AICirclePlayer);

        _get(Object.getPrototypeOf(AICirclePlayer.prototype), 'constructor', this).call(this, game, x, y, width, height, weaponFactory, colorSet, false, null);
    }

    _createClass(AICirclePlayer, [{
        key: 'update',
        value: function update() {}
    }]);

    return AICirclePlayer;
})(_playersCirclePlayerJs2['default']);

exports['default'] = AICirclePlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2FpL0FJQ2lyY2xlUGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBQXlCLDRCQUE0Qjs7OztJQUVoQyxjQUFjO2NBQWQsY0FBYzs7QUFFcEIsYUFGTSxjQUFjLENBRW5CLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRTs4QkFGL0MsY0FBYzs7QUFHM0IsbUNBSGEsY0FBYyw2Q0FHckIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7S0FDMUU7O2lCQUpnQixjQUFjOztlQU16QixrQkFBRyxFQUVSOzs7V0FSZ0IsY0FBYzs7O3FCQUFkLGNBQWMiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3ByZWZhYnMvYWkvQUlDaXJjbGVQbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2lyY2xlUGxheWVyIGZyb20gJy4uL3BsYXllcnMvQ2lyY2xlUGxheWVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQUlDaXJjbGVQbGF5ZXIgZXh0ZW5kcyBDaXJjbGVQbGF5ZXIge1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgd2VhcG9uRmFjdG9yeSwgY29sb3JTZXQpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgd2VhcG9uRmFjdG9yeSwgY29sb3JTZXQsIGZhbHNlLCBudWxsKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIFxuICAgIH1cblxufSJdfQ==
},{"../players/CirclePlayer.js":9}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
   value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _playersPlayerJs = require('../players/Player.js');

var _playersPlayerJs2 = _interopRequireDefault(_playersPlayerJs);

var AIPlayer = (function (_Player) {
   _inherits(AIPlayer, _Player);

   function AIPlayer(game, x, y, width, height, weaponFactory, colorSet) {
      _classCallCheck(this, AIPlayer);

      _get(Object.getPrototypeOf(AIPlayer.prototype), 'constructor', this).call(this, game, x, y, width, height, weaponFactory, colorSet, false, null);
      this.createStateMachine();
   }

   _createClass(AIPlayer, [{
      key: 'calcDistance',
      value: function calcDistance(player) {
         var dx = player.x - this.x;
         var dy = player.y - this.y;
         return Math.sqrt(dx * dx + dy * dy);
      }
   }, {
      key: 'getNearestPlayerInRange',
      value: function getNearestPlayerInRange() {
         var players = this.game.geowar.playersGroup.children;
         if (players && players.length > 0) {
            var minDistance = null;
            var minDistancePlayer = null;
            for (var i in players) {
               var distance = this.calcDistance(players[i]);
               if (minDistance == null || distance < minDistance) {
                  minDistance = distance;
                  minDistancePlayer = players[i];
               }
            }
         }
         return minDistancePlayer;
      }
   }, {
      key: 'catchupPlayer',
      value: function catchupPlayer(nearestPlayer, fsm) {
         if (this.calcDistance(nearestPlayer) > 600) {
            var radomSpeed = Math.floor(Math.random() * 100 + 50);
            this.body.thrust(radomSpeed);
         } else {
            fsm.attackPlayers();
         }
      }
   }, {
      key: 'createStateMachine',
      value: function createStateMachine() {
         var that = this;
         this.fsm = new StateMachine({
            init: 'cruise',
            transitions: [{ name: 'target', from: 'cruise', to: 'attack' }, { name: 'lostTarget', from: 'attack', to: 'cruise' }],
            methods: {
               searchPlayers: function searchPlayers() {
                  if (this.is('attack')) {
                     this.lostTarget();
                  }
                  var nearestPlayer = that.getNearestPlayerInRange();
                  if (nearestPlayer) {
                     var targetAngle = that.game.math.angleBetween(that.x, that.y, nearestPlayer.x, nearestPlayer.y);
                     that.body.angle = targetAngle * 180 / Math.PI + 90;
                     that.catchupPlayer(nearestPlayer, this);
                  }
               },
               attackPlayers: function attackPlayers() {
                  this.target();
                  if (!that.weapon.nextFireTime) {
                     that.weapon.nextFireTime = that.game.time.now + 5000;
                  } else if (that.game.time.now > that.weapon.nextFireTime) {
                     that.weapon.fire();
                     that.weapon.nextFireTime = that.game.time.now + Math.floor(Math.random() * 4000 + 1000);
                  }
               }
            }
         });
      }
   }, {
      key: 'update',
      value: function update() {
         this.fsm.searchPlayers();
      }
   }]);

   return AIPlayer;
})(_playersPlayerJs2['default']);

exports['default'] = AIPlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2FpL0FJUGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBQW1CLHNCQUFzQjs7OztJQUVwQixRQUFRO2FBQVIsUUFBUTs7QUFFZCxZQUZNLFFBQVEsQ0FFYixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUU7NEJBRi9DLFFBQVE7O0FBR3JCLGlDQUhhLFFBQVEsNkNBR2YsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7QUFDdkUsVUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDN0I7O2dCQUxnQixRQUFROzthQVFiLHNCQUFDLE1BQU0sRUFBQztBQUNqQixhQUFJLEVBQUUsR0FBRyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7QUFDM0IsYUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0FBQzNCLGdCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7T0FDdEM7OzthQUVzQixtQ0FBRTtBQUNyQixhQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO0FBQ3JELGFBQUcsT0FBTyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFDO0FBQzlCLGdCQUFJLFdBQVcsR0FBRyxJQUFJLENBQUM7QUFDdkIsZ0JBQUksaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0FBQzdCLGlCQUFJLElBQUksQ0FBQyxJQUFJLE9BQU8sRUFBQztBQUNqQixtQkFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM3QyxtQkFBRyxXQUFXLElBQUksSUFBSSxJQUFJLFFBQVEsR0FBRyxXQUFXLEVBQUM7QUFDOUMsNkJBQVcsR0FBRyxRQUFRLENBQUM7QUFDdkIsbUNBQWlCLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNqQzthQUNKO1VBQ0g7QUFDRCxnQkFBTyxpQkFBaUIsQ0FBQztPQUM1Qjs7O2FBSVksdUJBQUMsYUFBYSxFQUFDLEdBQUcsRUFBQztBQUM1QixhQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLEdBQUcsR0FBRyxFQUFDO0FBQ3ZDLGdCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUM7QUFDdEQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1VBQy9CLE1BQ0c7QUFDRCxlQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7VUFDdEI7T0FDSjs7O2FBRWlCLDhCQUFHO0FBQ2pCLGFBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQixhQUFJLENBQUMsR0FBRyxHQUFHLElBQUksWUFBWSxDQUFDO0FBQ3hCLGdCQUFJLEVBQUUsUUFBUTtBQUNkLHVCQUFXLEVBQUUsQ0FDVCxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEVBQ2hELEVBQUUsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsQ0FDdkQ7QUFDRCxtQkFBTyxFQUFFO0FBQ0wsNEJBQWEsRUFBRyx5QkFBVTtBQUN2QixzQkFBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFDO0FBQ2xCLHlCQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7bUJBQ3BCO0FBQ0Qsc0JBQUksYUFBYSxHQUFHLElBQUksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDO0FBQ25ELHNCQUFHLGFBQWEsRUFBQztBQUNkLHlCQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLGFBQWEsQ0FBQyxDQUFDLEVBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzdGLHlCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBQ25ELHlCQUFJLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBQyxJQUFJLENBQUMsQ0FBQzttQkFDekM7Z0JBQ0g7QUFDRCw0QkFBYSxFQUFHLHlCQUFVO0FBQ3ZCLHNCQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7QUFDZCxzQkFBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDO0FBQzFCLHlCQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDO21CQUN2RCxNQUNJLElBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFDO0FBQ25ELHlCQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQ25CLHlCQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDO21CQUMxRjtnQkFFSDthQUNKO1VBQ0osQ0FBQyxDQUFDO09BQ047OzthQUVLLGtCQUFHO0FBQ0wsYUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztPQUM1Qjs7O1VBL0VnQixRQUFROzs7cUJBQVIsUUFBUSIsImZpbGUiOiJEOi9hcXVhL2dlb3dhci9zcmMvcHJlZmFicy9haS9BSVBsYXllci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQbGF5ZXIgZnJvbSAnLi4vcGxheWVycy9QbGF5ZXIuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBSVBsYXllciBleHRlbmRzIFBsYXllciB7XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB3ZWFwb25GYWN0b3J5LCBjb2xvclNldCkge1xuICAgICAgICBzdXBlcihnYW1lLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB3ZWFwb25GYWN0b3J5LCBjb2xvclNldCwgZmFsc2UsIG51bGwpO1xuICAgICAgICB0aGlzLmNyZWF0ZVN0YXRlTWFjaGluZSgpO1xuICAgIH1cblxuXG4gICAgY2FsY0Rpc3RhbmNlKHBsYXllcil7XG4gICAgICAgdmFyIGR4ID0gcGxheWVyLnggLSB0aGlzLng7XG4gICAgICAgdmFyIGR5ID0gcGxheWVyLnkgLSB0aGlzLnk7XG4gICAgICAgcmV0dXJuIE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSk7XG4gICAgfVxuXG4gICAgZ2V0TmVhcmVzdFBsYXllckluUmFuZ2UoKXtcbiAgICAgICAgdmFyIHBsYXllcnMgPSB0aGlzLmdhbWUuZ2Vvd2FyLnBsYXllcnNHcm91cC5jaGlsZHJlbjtcbiAgICAgICAgaWYocGxheWVycyAmJiBwbGF5ZXJzLmxlbmd0aCA+IDApe1xuICAgICAgICAgICB2YXIgbWluRGlzdGFuY2UgPSBudWxsO1xuICAgICAgICAgICB2YXIgbWluRGlzdGFuY2VQbGF5ZXIgPSBudWxsO1xuICAgICAgICAgICBmb3IodmFyIGkgaW4gcGxheWVycyl7XG4gICAgICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSB0aGlzLmNhbGNEaXN0YW5jZShwbGF5ZXJzW2ldKTtcbiAgICAgICAgICAgICAgIGlmKG1pbkRpc3RhbmNlID09IG51bGwgfHwgZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSl7XG4gICAgICAgICAgICAgICAgICBtaW5EaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgICAgICAgbWluRGlzdGFuY2VQbGF5ZXIgPSBwbGF5ZXJzW2ldOyAgICBcbiAgICAgICAgICAgICAgIH0gIFxuICAgICAgICAgICB9ICAgXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1pbkRpc3RhbmNlUGxheWVyO1xuICAgIH1cblxuXG5cbiAgICBjYXRjaHVwUGxheWVyKG5lYXJlc3RQbGF5ZXIsZnNtKXtcbiAgICAgICAgaWYodGhpcy5jYWxjRGlzdGFuY2UobmVhcmVzdFBsYXllcikgPiA2MDApe1xuICAgICAgICAgICB2YXIgcmFkb21TcGVlZCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwMCArIDUwKTtcbiAgICAgICAgICAgdGhpcy5ib2R5LnRocnVzdChyYWRvbVNwZWVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNle1xuICAgICAgICAgICBmc20uYXR0YWNrUGxheWVycygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY3JlYXRlU3RhdGVNYWNoaW5lKCkge1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuZnNtID0gbmV3IFN0YXRlTWFjaGluZSh7XG4gICAgICAgICAgICBpbml0OiAnY3J1aXNlJyxcbiAgICAgICAgICAgIHRyYW5zaXRpb25zOiBbXG4gICAgICAgICAgICAgICAgeyBuYW1lOiAndGFyZ2V0JywgZnJvbTogJ2NydWlzZScsIHRvOiAnYXR0YWNrJyB9LFxuICAgICAgICAgICAgICAgIHsgbmFtZTogJ2xvc3RUYXJnZXQnLCBmcm9tOiAnYXR0YWNrJywgdG86ICdjcnVpc2UnIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBtZXRob2RzOiB7XG4gICAgICAgICAgICAgICAgc2VhcmNoUGxheWVycyA6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgaWYodGhpcy5pcygnYXR0YWNrJykpe1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMubG9zdFRhcmdldCgpO1xuICAgICAgICAgICAgICAgICAgIH0gXG4gICAgICAgICAgICAgICAgICAgdmFyIG5lYXJlc3RQbGF5ZXIgPSB0aGF0LmdldE5lYXJlc3RQbGF5ZXJJblJhbmdlKCk7XG4gICAgICAgICAgICAgICAgICAgaWYobmVhcmVzdFBsYXllcil7XG4gICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEFuZ2xlID0gdGhhdC5nYW1lLm1hdGguYW5nbGVCZXR3ZWVuKHRoYXQueCx0aGF0LnksbmVhcmVzdFBsYXllci54LG5lYXJlc3RQbGF5ZXIueSk7XG4gICAgICAgICAgICAgICAgICAgICAgdGhhdC5ib2R5LmFuZ2xlID0gdGFyZ2V0QW5nbGUgKiAxODAgLyBNYXRoLlBJICsgOTA7IFxuICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY2F0Y2h1cFBsYXllcihuZWFyZXN0UGxheWVyLHRoaXMpOyAgIFxuICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGF0dGFja1BsYXllcnMgOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0KCk7IFxuICAgICAgICAgICAgICAgICAgIGlmKCF0aGF0LndlYXBvbi5uZXh0RmlyZVRpbWUpe1xuICAgICAgICAgICAgICAgICAgICAgIHRoYXQud2VhcG9uLm5leHRGaXJlVGltZSA9IHRoYXQuZ2FtZS50aW1lLm5vdyArIDUwMDA7ICAgXG4gICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIGVsc2UgaWYodGhhdC5nYW1lLnRpbWUubm93ID4gdGhhdC53ZWFwb24ubmV4dEZpcmVUaW1lKXtcbiAgICAgICAgICAgICAgICAgICAgICB0aGF0LndlYXBvbi5maXJlKCk7IFxuICAgICAgICAgICAgICAgICAgICAgIHRoYXQud2VhcG9uLm5leHRGaXJlVGltZSA9IHRoYXQuZ2FtZS50aW1lLm5vdyArIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDQwMDAgKyAxMDAwKTsgICBcbiAgICAgICAgICAgICAgICAgICB9IFxuICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgdGhpcy5mc20uc2VhcmNoUGxheWVycygpO1xuICAgIH1cblxufSJdfQ==
},{"../players/Player.js":10}],6:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _playersSquarePlayerJs = require('../players/SquarePlayer.js');

var _playersSquarePlayerJs2 = _interopRequireDefault(_playersSquarePlayerJs);

var AISquarePlayer = (function (_SquarePlayer) {
    _inherits(AISquarePlayer, _SquarePlayer);

    function AISquarePlayer(game, x, y, width, height, weaponFactory, colorSet) {
        _classCallCheck(this, AISquarePlayer);

        _get(Object.getPrototypeOf(AISquarePlayer.prototype), 'constructor', this).call(this, game, x, y, width, height, weaponFactory, colorSet, false, null);
    }

    _createClass(AISquarePlayer, [{
        key: 'update',
        value: function update() {}
    }]);

    return AISquarePlayer;
})(_playersSquarePlayerJs2['default']);

exports['default'] = AISquarePlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2FpL0FJU3F1YXJlUGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBQXlCLDRCQUE0Qjs7OztJQUVoQyxjQUFjO2NBQWQsY0FBYzs7QUFFcEIsYUFGTSxjQUFjLENBRW5CLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRTs4QkFGL0MsY0FBYzs7QUFHM0IsbUNBSGEsY0FBYyw2Q0FHckIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxJQUFJLEVBQUU7S0FDMUU7O2lCQUpnQixjQUFjOztlQU16QixrQkFBRyxFQUVSOzs7V0FSZ0IsY0FBYzs7O3FCQUFkLGNBQWMiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3ByZWZhYnMvYWkvQUlTcXVhcmVQbGF5ZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3F1YXJlUGxheWVyIGZyb20gJy4uL3BsYXllcnMvU3F1YXJlUGxheWVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQUlTcXVhcmVQbGF5ZXIgZXh0ZW5kcyBTcXVhcmVQbGF5ZXIge1xuXG4gICAgY29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgd2VhcG9uRmFjdG9yeSwgY29sb3JTZXQpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgeCwgeSwgd2lkdGgsIGhlaWdodCwgd2VhcG9uRmFjdG9yeSwgY29sb3JTZXQsIGZhbHNlLCBudWxsKTtcbiAgICB9XG5cbiAgICB1cGRhdGUoKSB7XG4gICAgICAgIFxuICAgIH1cblxufSJdfQ==
},{"../players/SquarePlayer.js":12}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _BasicBackgroundJs = require('./BasicBackground.js');

var _BasicBackgroundJs2 = _interopRequireDefault(_BasicBackgroundJs);

var BackgroundFactory = (function () {
    function BackgroundFactory(game) {
        _classCallCheck(this, BackgroundFactory);

        this.game = game;
    }

    _createClass(BackgroundFactory, [{
        key: "createBackground",
        value: function createBackground(type, number, worldWidth, worldHeight) {
            switch (type) {
                case "basic":
                    {
                        this.createBasicBackground(number, worldWidth, worldHeight);
                    }
                default:
                    {
                        this.createBasicBackground(number, worldWidth, worldHeight);
                    }
            }
        }
    }, {
        key: "createBasicBackground",
        value: function createBasicBackground(number, worldWidth, worldHeight) {
            for (var i = 0; i < number; i++) {
                var x = Math.floor(Math.random() * (worldWidth - 200));
                var y = Math.floor(Math.random() * (worldHeight - 200));
                var background = new _BasicBackgroundJs2["default"](x, y, 200, 200, this.game);
                this.game.add.existing(background);
            }
        }
    }]);

    return BackgroundFactory;
})();

exports["default"] = BackgroundFactory;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2JhY2tncm91bmQvQmFja2dyb3VuZEZhY3RvcnkuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O2lDQUE0QixzQkFBc0I7Ozs7SUFFN0IsaUJBQWlCO0FBR3ZCLGFBSE0saUJBQWlCLENBR3RCLElBQUksRUFBRTs4QkFIRCxpQkFBaUI7O0FBSTlCLFlBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0tBQ3BCOztpQkFMZ0IsaUJBQWlCOztlQVFsQiwwQkFBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7QUFDcEQsb0JBQVEsSUFBSTtBQUNSLHFCQUFLLE9BQU87QUFBRTtBQUNWLDRCQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztxQkFDL0Q7QUFBQSxBQUNEO0FBQVM7QUFDTCw0QkFBSSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7cUJBQy9EO0FBQUEsYUFDSjtTQUNKOzs7ZUFHb0IsK0JBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUU7QUFDbkQsaUJBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDN0Isb0JBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLFVBQVUsR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFDLENBQUM7QUFDdkQsb0JBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLFdBQVcsR0FBRyxHQUFHLENBQUEsQUFBQyxDQUFDLENBQUM7QUFDeEQsb0JBQUksVUFBVSxHQUFHLG1DQUFvQixDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2hFLG9CQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7YUFDdEM7U0FDSjs7O1dBM0JnQixpQkFBaUI7OztxQkFBakIsaUJBQWlCIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2JhY2tncm91bmQvQmFja2dyb3VuZEZhY3RvcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQmFzaWNCYWNrZ3JvdW5kIGZyb20gJy4vQmFzaWNCYWNrZ3JvdW5kLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFja2dyb3VuZEZhY3Rvcnkge1xuXG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgfVxuXG5cbiAgICBjcmVhdGVCYWNrZ3JvdW5kKHR5cGUsIG51bWJlciwgd29ybGRXaWR0aCwgd29ybGRIZWlnaHQpIHtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiYmFzaWNcIjoge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQmFzaWNCYWNrZ3JvdW5kKG51bWJlciwgd29ybGRXaWR0aCwgd29ybGRIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQmFzaWNCYWNrZ3JvdW5kKG51bWJlciwgd29ybGRXaWR0aCwgd29ybGRIZWlnaHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBjcmVhdGVCYXNpY0JhY2tncm91bmQobnVtYmVyLCB3b3JsZFdpZHRoLCB3b3JsZEhlaWdodCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bWJlcjsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgeCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh3b3JsZFdpZHRoIC0gMjAwKSk7XG4gICAgICAgICAgICB2YXIgeSA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqICh3b3JsZEhlaWdodCAtIDIwMCkpO1xuICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSBuZXcgQmFzaWNCYWNrZ3JvdW5kKHgsIHksIDIwMCwgMjAwLCB0aGlzLmdhbWUpO1xuICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC5leGlzdGluZyhiYWNrZ3JvdW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxufSJdfQ==
},{"./BasicBackground.js":8}],8:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesBackgroundsBasicbackgroundJson = require('../../textures/backgrounds/basicbackground.json');

var _texturesBackgroundsBasicbackgroundJson2 = _interopRequireDefault(_texturesBackgroundsBasicbackgroundJson);

var BasicBackground = (function (_Phaser$Image) {
    _inherits(BasicBackground, _Phaser$Image);

    function BasicBackground(x, y, width, height, game) {
        _classCallCheck(this, BasicBackground);

        _get(Object.getPrototypeOf(BasicBackground.prototype), 'constructor', this).call(this, game, x, y, game.make.bitmapData(width, height), null);
        this.canvas = this.key;
        this.draw();
    }

    _createClass(BasicBackground, [{
        key: 'draw',
        value: function draw() {
            new _commonCanvasHelperJs2['default'](this.canvas, _texturesBackgroundsBasicbackgroundJson2['default']).drawTexture();
        }
    }]);

    return BasicBackground;
})(Phaser.Image);

exports['default'] = BasicBackground;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL2JhY2tncm91bmQvQmFzaWNCYWNrZ3JvdW5kLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQXlCLDhCQUE4Qjs7OztzREFDNUIsaURBQWlEOzs7O0lBRXZELGVBQWU7Y0FBZixlQUFlOztBQUVyQixhQUZNLGVBQWUsQ0FFcEIsQ0FBQyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTs4QkFGdEIsZUFBZTs7QUFHN0IsbUNBSGMsZUFBZSw2Q0FHdkIsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLElBQUksRUFBRTtBQUM3RCxZQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDdkIsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQ2Q7O2lCQU5nQixlQUFlOztlQVM1QixnQkFBRztBQUNILGtEQUFpQixJQUFJLENBQUMsTUFBTSxzREFBaUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMvRDs7O1dBWGdCLGVBQWU7R0FBUyxNQUFNLENBQUMsS0FBSzs7cUJBQXBDLGVBQWUiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3ByZWZhYnMvYmFja2dyb3VuZC9CYXNpY0JhY2tncm91bmQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ2FudmFzSGVscGVyIGZyb20gJy4uLy4uL2NvbW1vbi9DYW52YXNIZWxwZXIuanMnO1xuaW1wb3J0IGJhY2tncm91bmRKc29uIGZyb20gJy4uLy4uL3RleHR1cmVzL2JhY2tncm91bmRzL2Jhc2ljYmFja2dyb3VuZC5qc29uJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNpY0JhY2tncm91bmQgZXh0ZW5kcyBQaGFzZXIuSW1hZ2V7XG5cbiAgICBjb25zdHJ1Y3Rvcih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBnYW1lKSB7XG4gICAgICAgc3VwZXIoZ2FtZSwgeCwgeSwgZ2FtZS5tYWtlLmJpdG1hcERhdGEod2lkdGgsIGhlaWdodCksIG51bGwpO1xuICAgICAgIHRoaXMuY2FudmFzID0gdGhpcy5rZXk7XG4gICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfVxuXG5cbiAgICBkcmF3KCkge1xuICAgICAgICBuZXcgQ2FudmFzSGVscGVyKHRoaXMuY2FudmFzLCBiYWNrZ3JvdW5kSnNvbikuZHJhd1RleHR1cmUoKTtcbiAgICB9XG5cbn0iXX0=
},{"../../common/CanvasHelper.js":2,"../../textures/backgrounds/basicbackground.json":26}],9:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _PlayerJs = require('./Player.js');

var _PlayerJs2 = _interopRequireDefault(_PlayerJs);

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesPlayersCircleplayerJson = require('../../textures/players/circleplayer.json');

var _texturesPlayersCircleplayerJson2 = _interopRequireDefault(_texturesPlayersCircleplayerJson);

var CirclePlayer = (function (_Player) {
    _inherits(CirclePlayer, _Player);

    function CirclePlayer() {
        _classCallCheck(this, CirclePlayer);

        _get(Object.getPrototypeOf(CirclePlayer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(CirclePlayer, [{
        key: 'draw',
        value: function draw() {
            new _commonCanvasHelperJs2['default'](this.canvas, _texturesPlayersCircleplayerJson2['default'], this.colorSet).drawTexture();
        }
    }, {
        key: 'getType',
        value: function getType() {
            return "CirclePlayer";
        }
    }]);

    return CirclePlayer;
})(_PlayerJs2['default']);

exports['default'] = CirclePlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3BsYXllcnMvQ2lyY2xlUGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQW1CLGFBQWE7Ozs7b0NBQ1AsOEJBQThCOzs7OytDQUNoQywwQ0FBMEM7Ozs7SUFFNUMsWUFBWTtjQUFaLFlBQVk7O2FBQVosWUFBWTs4QkFBWixZQUFZOzttQ0FBWixZQUFZOzs7aUJBQVosWUFBWTs7ZUFFekIsZ0JBQUc7QUFDSCxrREFBaUIsSUFBSSxDQUFDLE1BQU0sZ0RBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3hFOzs7ZUFHTSxtQkFBRTtBQUNMLG1CQUFPLGNBQWMsQ0FBQztTQUN6Qjs7O1dBVGdCLFlBQVk7OztxQkFBWixZQUFZIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3BsYXllcnMvQ2lyY2xlUGxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBsYXllciBmcm9tICcuL1BsYXllci5qcyc7XG5pbXBvcnQgQ2FudmFzSGVscGVyIGZyb20gJy4uLy4uL2NvbW1vbi9DYW52YXNIZWxwZXIuanMnO1xuaW1wb3J0IHBsYXllckpzb24gZnJvbSAnLi4vLi4vdGV4dHVyZXMvcGxheWVycy9jaXJjbGVwbGF5ZXIuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENpcmNsZVBsYXllciBleHRlbmRzIFBsYXllciB7XG5cbiAgICBkcmF3KCkge1xuICAgICAgICBuZXcgQ2FudmFzSGVscGVyKHRoaXMuY2FudmFzLHBsYXllckpzb24sdGhpcy5jb2xvclNldCkuZHJhd1RleHR1cmUoKTtcbiAgICB9XG5cblxuICAgIGdldFR5cGUoKXtcbiAgICAgICAgcmV0dXJuIFwiQ2lyY2xlUGxheWVyXCI7XG4gICAgfVxuXG59Il19
},{"../../common/CanvasHelper.js":2,"../../textures/players/circleplayer.json":27,"./Player.js":10}],10:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesPlayersPlayerJson = require('../../textures/players/player.json');

var _texturesPlayersPlayerJson2 = _interopRequireDefault(_texturesPlayersPlayerJson);

var _commonUtilsJs = require('../../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _weaponsExplosionParticleJs = require('../weapons/ExplosionParticle.js');

var _weaponsExplosionParticleJs2 = _interopRequireDefault(_weaponsExplosionParticleJs);

var Player = (function (_Phaser$Sprite) {
    _inherits(Player, _Phaser$Sprite);

    function Player(game, x, y, width, height, weaponFactory, colorSet, needControl, signals) {
        _classCallCheck(this, Player);

        _get(Object.getPrototypeOf(Player.prototype), 'constructor', this).call(this, game, x, y, game.make.bitmapData(width, height));
        this.width = width;
        this.height = height;
        this.canvas = this.key;
        this.needControl = needControl;
        this.signals = signals;
        this.blood = 20;
        if (colorSet) {
            this.colorSet = colorSet;
        } else {
            this.colorSet = {
                head: _commonUtilsJs2['default'].generateRandomColor(),
                body: _commonUtilsJs2['default'].generateRandomColor()
            };
        }

        this.draw();

        this.game.physics.p2.enable(this);
        this.anchor.setTo(0.5, 0.57);
        this.collideSetting();
        this.weaponFactory = weaponFactory;
        this.createWeapon();
    }

    _createClass(Player, [{
        key: 'collideSetting',
        value: function collideSetting() {
            this.body.setCollisionGroup(this.game.geowar.playerCollisionGroup);
            this.body.collides([this.game.geowar.bulletCollisionGroup, this.game.geowar.playerCollisionGroup]);
            this.body.onBeginContact.add(this.contact);
        }
    }, {
        key: 'contact',
        value: function contact(otherBody) {
            if (otherBody && otherBody.sprite && otherBody.sprite.isBullet) {
                if (otherBody.sprite.player != this) {
                    //kill for reuse bullet
                    otherBody.sprite.kill();
                }
            }
        }
    }, {
        key: 'draw',
        value: function draw() {
            new _commonCanvasHelperJs2['default'](this.canvas, _texturesPlayersPlayerJson2['default'], this.colorSet).drawTexture();
        }
    }, {
        key: 'update',
        value: function update() {
            if (this.needControl) {

                if (this.game.input.keyboard.isDown(Phaser.Keyboard.LEFT)) {
                    this.body.rotateLeft(50);
                } else if (this.game.input.keyboard.isDown(Phaser.Keyboard.RIGHT)) {
                    this.body.rotateRight(50);
                } else {
                    this.body.setZeroRotation();
                }
                if (this.game.input.keyboard.isDown(Phaser.Keyboard.UP)) {
                    this.body.thrust(300);
                } else if (this.game.input.keyboard.isDown(Phaser.Keyboard.DOWN)) {
                    this.body.reverse(300);
                }

                if (this.fireButton.isDown) {
                    this.weapon.fire(this);
                }
                //only push current player data to server and use socket.io to broadcase to peer players
                this.pushState({ name: "playerMove", id: this.playerId, x: this.x, y: this.y, angle: this.angle, type: this.getType(), colorSet: this.colorSet });
                this.weapon.push();
            }
            //update peer player pos by data from socket.io
            else if (this.game.geowar.players[this.playerId]) {
                    if (this.game.geowar.players[this.playerId].pos) {
                        var pos = this.game.geowar.players[this.playerId].pos;
                        if (this.game.geowar.enablePredict && this.timestamp == pos.timestamp) {
                            predictPeerPlayerMove(pos);
                        } else {
                            this.previous = {
                                x: this.body.x,
                                y: this.body.y,
                                angle: this.body.angle,
                                timestamp: this.timestamp
                            };
                            this.body.x = pos.x;
                            this.body.y = pos.y;
                            this.body.angle = pos.angle;
                            this.timestamp = pos.timestamp;
                        }
                    }
                    if (this.game.geowar.players[this.playerId].fire) {
                        this.weapon.playPeerFire(this.game.geowar.players[this.playerId].fire.bullets);
                        this.game.geowar.players[this.playerId].fire = null;
                    }
                }
        }
    }, {
        key: 'predictPeerPlayerMove',
        value: function predictPeerPlayerMove(posFromSocket) {}
    }, {
        key: 'pushState',
        value: function pushState(data) {
            this.game.geowar.socketHandler.push(data);
        }
    }, {
        key: 'createWeapon',
        value: function createWeapon() {
            this.weapon = this.weaponFactory.createWeapon('basic', this);

            this.fireButton = this.game.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);
        }
    }, {
        key: 'destroy',
        value: function destroy(destroyChildren, destroyTexture) {
            this.triggerExplode();
            //myself killed
            if (this.game.geowar.currentPlayer.playerId == this.playerId && this.signals && this.signals.replay) {
                this.signals.replay.dispatch();
            }
            //kill other 
            else if (this.game.geowar.currentPlayer.playerId != this.playerId && this.game.geowar.currentPlayer.signals && this.game.geowar.currentPlayer.signals.kill) {
                    this.game.geowar.currentPlayer.signals.kill.dispatch();
                }
            _get(Object.getPrototypeOf(Player.prototype), 'destroy', this).call(this, destroyChildren, destroyTexture);
            //coz the weapon not children, need to destory too
            this.weapon.destroy();
        }
    }, {
        key: 'triggerExplode',
        value: function triggerExplode() {
            var emitter = this.game.add.emitter(this.x, this.y, 50);
            emitter.gravity = 0;
            emitter.particleClass = _weaponsExplosionParticleJs2['default'];
            emitter.makeParticles();
            emitter.setAlpha(1, .2, 3000);
            emitter.setScale(1, 2, 1, 2, 3000);
            emitter.explode(3400, 15);
        }
    }, {
        key: 'getType',
        value: function getType() {
            return "Player";
        }
    }]);

    return Player;
})(Phaser.Sprite);

exports['default'] = Player;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../common/CanvasHelper.js":2,"../../common/Utils.js":3,"../../textures/players/player.json":28,"../weapons/ExplosionParticle.js":15}],11:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _PlayerJs = require('./Player.js');

var _PlayerJs2 = _interopRequireDefault(_PlayerJs);

var _SquarePlayerJs = require('./SquarePlayer.js');

var _SquarePlayerJs2 = _interopRequireDefault(_SquarePlayerJs);

var _CirclePlayerJs = require('./CirclePlayer.js');

var _CirclePlayerJs2 = _interopRequireDefault(_CirclePlayerJs);

var _weaponsWeaponFactoryJs = require('../weapons/WeaponFactory.js');

var _weaponsWeaponFactoryJs2 = _interopRequireDefault(_weaponsWeaponFactoryJs);

var _commonUtilsJs = require('../../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _aiAIPlayerJs = require('../ai/AIPlayer.js');

var _aiAIPlayerJs2 = _interopRequireDefault(_aiAIPlayerJs);

var _aiAICirclePlayerJs = require('../ai/AICirclePlayer.js');

var _aiAICirclePlayerJs2 = _interopRequireDefault(_aiAICirclePlayerJs);

var _aiAISquarePlayerJs = require('../ai/AISquarePlayer.js');

var _aiAISquarePlayerJs2 = _interopRequireDefault(_aiAISquarePlayerJs);

var PlayerFactory = (function () {
    function PlayerFactory(game) {
        _classCallCheck(this, PlayerFactory);

        this._playerTypes = ['triangle', 'square', 'circle'];

        this.game = game;
        this.weaponFactory = new _weaponsWeaponFactoryJs2['default'](game);
    }

    _createClass(PlayerFactory, [{
        key: 'createPlayer',
        value: function createPlayer(defaultType, signals) {
            var type = defaultType;
            if (!type) {
                type = this._playerTypes[Math.floor(Math.random() * this._playerTypes.length)];
            }
            var randomX = Math.floor(Math.random() * (this.game.width - 50) + 50);
            var randomY = Math.floor(Math.random() * (this.game.height - 50) + 50);
            switch (type) {
                case "triangle":
                    return new _PlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null, true, signals);
                case "square":
                    return new _SquarePlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null, true, signals);
                case "circle":
                    return new _CirclePlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null, true, signals);
                default:
                    return new _PlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null, true, signals);
            }
        }
    }, {
        key: 'createPeerPlayer',
        value: function createPeerPlayer(peerMetaData) {
            var type = peerMetaData.type;
            var player = null;
            switch (type) {
                case "Player":
                    player = new _PlayerJs2['default'](this.game, peerMetaData.x, peerMetaData.y, 30, 35, this.weaponFactory, peerMetaData.colorSet, false);
                    break;
                case "SquarePlayer":
                    player = new _SquarePlayerJs2['default'](this.game, peerMetaData.x, peerMetaData.y, 30, 35, this.weaponFactory, peerMetaData.colorSet, false);
                    break;
                case "CirclePlayer":
                    player = new _CirclePlayerJs2['default'](this.game, peerMetaData.x, peerMetaData.y, 30, 35, this.weaponFactory, peerMetaData.colorSet, false);
                    break;
                default:
                    player = new _PlayerJs2['default'](this.game, peerMetaData.x, peerMetaData.y, 30, 35, this.weaponFactory, peerMetaData.colorSet, false);
                    break;
            }
            player.playerId = peerMetaData.id;
            return player;
        }
    }, {
        key: 'createAIPlayer',
        value: function createAIPlayer(defaultType) {
            var type = defaultType;
            if (!type) {
                type = this._playerTypes[Math.floor(Math.random() * this._playerTypes.length)];
            }
            var randomX = Math.floor(Math.random() * (this.game.width - 50) + 50);
            var randomY = Math.floor(Math.random() * (this.game.height - 50) + 50);
            switch (type) {
                case "triangle":
                    return new _aiAIPlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null);
                case "square":
                    return new _aiAISquarePlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null);
                case "circle":
                    return new _aiAICirclePlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null);
                default:
                    return new _aiAIPlayerJs2['default'](this.game, randomX, randomY, 30, 35, this.weaponFactory, null);
            }
        }
    }]);

    return PlayerFactory;
})();

exports['default'] = PlayerFactory;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../common/Utils.js":3,"../ai/AICirclePlayer.js":4,"../ai/AIPlayer.js":5,"../ai/AISquarePlayer.js":6,"../weapons/WeaponFactory.js":17,"./CirclePlayer.js":9,"./Player.js":10,"./SquarePlayer.js":12}],12:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _PlayerJs = require('./Player.js');

var _PlayerJs2 = _interopRequireDefault(_PlayerJs);

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesPlayersSquareplayerJson = require('../../textures/players/squareplayer.json');

var _texturesPlayersSquareplayerJson2 = _interopRequireDefault(_texturesPlayersSquareplayerJson);

var SquarePlayer = (function (_Player) {
    _inherits(SquarePlayer, _Player);

    function SquarePlayer() {
        _classCallCheck(this, SquarePlayer);

        _get(Object.getPrototypeOf(SquarePlayer.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(SquarePlayer, [{
        key: 'draw',
        value: function draw() {
            new _commonCanvasHelperJs2['default'](this.canvas, _texturesPlayersSquareplayerJson2['default'], this.colorSet).drawTexture();
        }
    }, {
        key: 'getType',
        value: function getType() {
            return "SquarePlayer";
        }
    }]);

    return SquarePlayer;
})(_PlayerJs2['default']);

exports['default'] = SquarePlayer;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3BsYXllcnMvU3F1YXJlUGxheWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQW1CLGFBQWE7Ozs7b0NBQ1AsOEJBQThCOzs7OytDQUNoQywwQ0FBMEM7Ozs7SUFFNUMsWUFBWTtjQUFaLFlBQVk7O2FBQVosWUFBWTs4QkFBWixZQUFZOzttQ0FBWixZQUFZOzs7aUJBQVosWUFBWTs7ZUFFekIsZ0JBQUc7QUFDSCxrREFBaUIsSUFBSSxDQUFDLE1BQU0sZ0RBQVksSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQ3hFOzs7ZUFFTSxtQkFBRTtBQUNMLG1CQUFPLGNBQWMsQ0FBQztTQUN6Qjs7O1dBUmdCLFlBQVk7OztxQkFBWixZQUFZIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3BsYXllcnMvU3F1YXJlUGxheWVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFBsYXllciBmcm9tICcuL1BsYXllci5qcyc7XG5pbXBvcnQgQ2FudmFzSGVscGVyIGZyb20gJy4uLy4uL2NvbW1vbi9DYW52YXNIZWxwZXIuanMnO1xuaW1wb3J0IHBsYXllckpzb24gZnJvbSAnLi4vLi4vdGV4dHVyZXMvcGxheWVycy9zcXVhcmVwbGF5ZXIuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNxdWFyZVBsYXllciBleHRlbmRzIFBsYXllciB7XG5cbiAgICBkcmF3KCkge1xuICAgICAgICBuZXcgQ2FudmFzSGVscGVyKHRoaXMuY2FudmFzLHBsYXllckpzb24sdGhpcy5jb2xvclNldCkuZHJhd1RleHR1cmUoKTtcbiAgICB9XG5cbiAgICBnZXRUeXBlKCl7XG4gICAgICAgIHJldHVybiBcIlNxdWFyZVBsYXllclwiO1xuICAgIH1cblxufSJdfQ==
},{"../../common/CanvasHelper.js":2,"../../textures/players/squareplayer.json":29,"./Player.js":10}],13:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var NumberBox = (function (_Phaser$Group) {
	_inherits(NumberBox, _Phaser$Group);

	function NumberBox(game, x, y, text, val, style, parent) {
		_classCallCheck(this, NumberBox);

		_get(Object.getPrototypeOf(NumberBox.prototype), 'constructor', this).call(this, game, parent);
		this.text = text;
		this.val = val;
		this.txtValue = new Phaser.Text(this.game, x, y, text + ': ' + val.toString(), style);
		this.txtValue.anchor.setTo(.5, .5);
		this.add(this.txtValue);
	}

	_createClass(NumberBox, [{
		key: 'setValue',
		value: function setValue(val) {
			this.val = val;
			this.txtValue.text = this.text + ': ' + val.toString();
		}
	}, {
		key: 'getValue',
		value: function getValue() {
			return this.val;
		}
	}]);

	return NumberBox;
})(Phaser.Group);

exports['default'] = NumberBox;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3VpL051bWJlckJveC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztJQUFxQixTQUFTO1dBQVQsU0FBUzs7QUFFbEIsVUFGUyxTQUFTLENBRWpCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRTt3QkFGOUIsU0FBUzs7QUFHMUIsNkJBSGlCLFNBQVMsNkNBR3BCLElBQUksRUFBRSxNQUFNLEVBQUU7QUFDaEIsTUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7QUFDdkIsTUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDZixNQUFJLENBQUMsUUFBUSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDdEYsTUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNuQyxNQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztFQUV4Qjs7Y0FWbUIsU0FBUzs7U0FZckIsa0JBQUMsR0FBRyxFQUFFO0FBQ2IsT0FBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7QUFDZixPQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7R0FDdkQ7OztTQUVPLG9CQUFFO0FBQ0osVUFBTyxJQUFJLENBQUMsR0FBRyxDQUFDO0dBQ3JCOzs7UUFuQm1CLFNBQVM7R0FBUyxNQUFNLENBQUMsS0FBSzs7cUJBQTlCLFNBQVMiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3ByZWZhYnMvdWkvTnVtYmVyQm94LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTnVtYmVyQm94IGV4dGVuZHMgUGhhc2VyLkdyb3VwIHsgXG5cblx0Y29uc3RydWN0b3IoZ2FtZSwgeCwgeSwgdGV4dCwgdmFsLCBzdHlsZSwgcGFyZW50KSB7ICBcblx0ICBcdHN1cGVyKGdhbWUsIHBhcmVudCk7XG4gICAgICAgIHRoaXMudGV4dCA9IHRleHQ7XG5cdFx0dGhpcy52YWwgPSB2YWw7ICAgIFxuXHRcdHRoaXMudHh0VmFsdWUgPSBuZXcgUGhhc2VyLlRleHQodGhpcy5nYW1lLCB4LCB5LCB0ZXh0ICsgJzogJyArIHZhbC50b1N0cmluZygpLCBzdHlsZSk7XG5cdFx0dGhpcy50eHRWYWx1ZS5hbmNob3Iuc2V0VG8oLjUsIC41KTtcblx0XHR0aGlzLmFkZCh0aGlzLnR4dFZhbHVlKTtcblxuXHR9XG5cblx0c2V0VmFsdWUodmFsKSB7XG5cdFx0dGhpcy52YWwgPSB2YWw7XG5cdFx0dGhpcy50eHRWYWx1ZS50ZXh0ID0gdGhpcy50ZXh0ICsgJzogJyArIHZhbC50b1N0cmluZygpO1xuXHR9XG5cblx0Z2V0VmFsdWUoKXtcbiAgICAgICByZXR1cm4gdGhpcy52YWw7XG5cdH1cbn0iXX0=
},{}],14:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _WeaponJs = require('./Weapon.js');

var _WeaponJs2 = _interopRequireDefault(_WeaponJs);

var _commonUtilsJs = require('../../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesWeaponsDirtweaponJson = require('../../textures/weapons/dirtweapon.json');

var _texturesWeaponsDirtweaponJson2 = _interopRequireDefault(_texturesWeaponsDirtweaponJson);

var DirtWeapon = (function (_Weapon) {
    _inherits(DirtWeapon, _Weapon);

    function DirtWeapon() {
        _classCallCheck(this, DirtWeapon);

        _get(Object.getPrototypeOf(DirtWeapon.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(DirtWeapon, [{
        key: 'createBullet',
        value: function createBullet() {
            this.bmd = this.game.make.bitmapData(12, 12);
            new _commonCanvasHelperJs2['default'](this.bmd, _texturesWeaponsDirtweaponJson2['default']).drawTexture();
        }
    }]);

    return DirtWeapon;
})(_WeaponJs2['default']);

exports['default'] = DirtWeapon;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3dlYXBvbnMvRGlydFdlYXBvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O3dCQUFtQixhQUFhOzs7OzZCQUNkLHVCQUF1Qjs7OztvQ0FDaEIsOEJBQThCOzs7OzZDQUNoQyx3Q0FBd0M7Ozs7SUFFMUMsVUFBVTtjQUFWLFVBQVU7O2FBQVYsVUFBVTs4QkFBVixVQUFVOzttQ0FBVixVQUFVOzs7aUJBQVYsVUFBVTs7ZUFFZix3QkFBRztBQUNYLGdCQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDN0Msa0RBQWlCLElBQUksQ0FBQyxHQUFHLDZDQUFZLENBQUMsV0FBVyxFQUFFLENBQUM7U0FDdkQ7OztXQUxnQixVQUFVOzs7cUJBQVYsVUFBVSIsImZpbGUiOiJEOi9hcXVhL2dlb3dhci9zcmMvcHJlZmFicy93ZWFwb25zL0RpcnRXZWFwb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgV2VhcG9uIGZyb20gJy4vV2VhcG9uLmpzJztcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9jb21tb24vVXRpbHMuanMnO1xuaW1wb3J0IENhbnZhc0hlbHBlciBmcm9tICcuLi8uLi9jb21tb24vQ2FudmFzSGVscGVyLmpzJztcbmltcG9ydCB3ZWFwb25Kc29uIGZyb20gJy4uLy4uL3RleHR1cmVzL3dlYXBvbnMvZGlydHdlYXBvbi5qc29uJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlydFdlYXBvbiBleHRlbmRzIFdlYXBvbntcblxuICAgIGNyZWF0ZUJ1bGxldCgpIHtcbiAgICAgICAgdGhpcy5ibWQgPSB0aGlzLmdhbWUubWFrZS5iaXRtYXBEYXRhKDEyLCAxMik7XG4gICAgICAgIG5ldyBDYW52YXNIZWxwZXIodGhpcy5ibWQsd2VhcG9uSnNvbikuZHJhd1RleHR1cmUoKTtcbiAgICB9XG5cbn0iXX0=
},{"../../common/CanvasHelper.js":2,"../../common/Utils.js":3,"../../textures/weapons/dirtweapon.json":30,"./Weapon.js":16}],15:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _commonUtilsJs = require('../../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _texturesWeaponsExplosionparticleJson = require('../../textures/weapons/explosionparticle.json');

var _texturesWeaponsExplosionparticleJson2 = _interopRequireDefault(_texturesWeaponsExplosionparticleJson);

var ExplosionParticle = (function (_Phaser$Particle) {
    _inherits(ExplosionParticle, _Phaser$Particle);

    function ExplosionParticle(game, x, y, key, frame) {
        _classCallCheck(this, ExplosionParticle);

        _get(Object.getPrototypeOf(ExplosionParticle.prototype), 'constructor', this).call(this, game, x, y, game.make.bitmapData(12, 12), frame);
        this.canvas = this.key;
        this.colorSet = {
            body: _commonUtilsJs2['default'].generateRandomColor()
        };

        this.draw();
    }

    _createClass(ExplosionParticle, [{
        key: 'draw',
        value: function draw() {
            new _commonCanvasHelperJs2['default'](this.canvas, _texturesWeaponsExplosionparticleJson2['default'], this.colorSet).drawTexture();
        }
    }]);

    return ExplosionParticle;
})(Phaser.Particle);

exports['default'] = ExplosionParticle;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3dlYXBvbnMvRXhwbG9zaW9uUGFydGljbGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztvQ0FBeUIsOEJBQThCOzs7OzZCQUNyQyx1QkFBdUI7Ozs7b0RBQ2YsK0NBQStDOzs7O0lBRXBELGlCQUFpQjtjQUFqQixpQkFBaUI7O0FBRXZCLGFBRk0saUJBQWlCLENBRXRCLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUU7OEJBRm5CLGlCQUFpQjs7QUFHOUIsbUNBSGEsaUJBQWlCLDZDQUd4QixJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFO0FBQ3ZELFlBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQztBQUN2QixZQUFJLENBQUMsUUFBUSxHQUFHO0FBQ1osZ0JBQUksRUFBRSwyQkFBTSxtQkFBbUIsRUFBRTtTQUNwQyxDQUFDOztBQUVGLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztLQUNmOztpQkFWZ0IsaUJBQWlCOztlQWE5QixnQkFBRztBQUNILGtEQUFpQixJQUFJLENBQUMsTUFBTSxxREFBaUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1NBQzdFOzs7V0FmZ0IsaUJBQWlCO0dBQVMsTUFBTSxDQUFDLFFBQVE7O3FCQUF6QyxpQkFBaUIiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3ByZWZhYnMvd2VhcG9ucy9FeHBsb3Npb25QYXJ0aWNsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDYW52YXNIZWxwZXIgZnJvbSAnLi4vLi4vY29tbW9uL0NhbnZhc0hlbHBlci5qcyc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vY29tbW9uL1V0aWxzLmpzJztcbmltcG9ydCBleHBsb3Npb25Kc29uIGZyb20gJy4uLy4uL3RleHR1cmVzL3dlYXBvbnMvZXhwbG9zaW9ucGFydGljbGUuanNvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGxvc2lvblBhcnRpY2xlIGV4dGVuZHMgUGhhc2VyLlBhcnRpY2xlIHtcblxuICAgIGNvbnN0cnVjdG9yKGdhbWUsIHgsIHksIGtleSwgZnJhbWUpIHtcbiAgICAgICAgc3VwZXIoZ2FtZSwgeCwgeSwgZ2FtZS5tYWtlLmJpdG1hcERhdGEoMTIsIDEyKSwgZnJhbWUpO1xuICAgICAgICB0aGlzLmNhbnZhcyA9IHRoaXMua2V5O1xuICAgICAgICB0aGlzLmNvbG9yU2V0ID0ge1xuICAgICAgICAgICAgYm9keTogVXRpbHMuZ2VuZXJhdGVSYW5kb21Db2xvcigpXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5kcmF3KCk7XG4gICAgfVxuXG5cbiAgICBkcmF3KCkge1xuICAgICAgICBuZXcgQ2FudmFzSGVscGVyKHRoaXMuY2FudmFzLCBleHBsb3Npb25Kc29uLCB0aGlzLmNvbG9yU2V0KS5kcmF3VGV4dHVyZSgpO1xuICAgIH1cblxufSJdfQ==
},{"../../common/CanvasHelper.js":2,"../../common/Utils.js":3,"../../textures/weapons/explosionparticle.json":31}],16:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _commonUtilsJs = require('../../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _commonCanvasHelperJs = require('../../common/CanvasHelper.js');

var _commonCanvasHelperJs2 = _interopRequireDefault(_commonCanvasHelperJs);

var _texturesWeaponsWeaponJson = require('../../textures/weapons/weapon.json');

var _texturesWeaponsWeaponJson2 = _interopRequireDefault(_texturesWeaponsWeaponJson);

var Weapon = (function () {
    function Weapon(game, player) {
        _classCallCheck(this, Weapon);

        this.game = game;
        this.player = player;
        this.speed = 500;
        this.shotInterval = 50;
        this.bulletGate = 0;
        this.bulletGroup = this.game.add.group();
        this.bulletCounts = this.game.geowar.initBulletCount;
        this.createBullet();
    }

    _createClass(Weapon, [{
        key: 'createBullet',
        value: function createBullet() {
            this.bmd = this.game.make.bitmapData(12, 12);
            new _commonCanvasHelperJs2['default'](this.bmd, _texturesWeaponsWeaponJson2['default'], { body: this.player.colorSet.head }).drawTexture();
        }
    }, {
        key: 'fire',
        value: function fire() {
            if (this.game.time.now > this.bulletGate && this.bulletCounts > 0) {
                var bullet = this.bulletGroup.getFirstDead();
                var pos = this.initBulletPosition();
                if (bullet) {
                    bullet.bid = _commonUtilsJs2['default'].generateRandomNumber();
                    bullet.body.x = pos.x;
                    bullet.body.y = pos.y;
                    var v = this.initBulletVelocity();
                    bullet.body.velocity.x = v.x;
                    bullet.body.velocity.y = v.y;
                    bullet.revive();
                } else {
                    var bullet = this.bulletGroup.create(pos.x, pos.y, this.bmd);
                    bullet.bid = _commonUtilsJs2['default'].generateRandomNumber();
                    bullet.isBullet = true;
                    this.game.physics.p2.enable(bullet);
                    bullet.checkWorldBounds = true;
                    bullet.body.collideWorldBounds = false;
                    bullet.events.onOutOfBounds.add(this.bulletOutOfBounds, this);
                    var v = this.initBulletVelocity();
                    bullet.body.velocity.x = v.x;
                    bullet.body.velocity.y = v.y;
                    this.collideSetting(bullet);
                }
                this.bulletCounts--;
                this.bulletGate = this.game.time.now + this.shotInterval;
            }
        }
    }, {
        key: 'push',
        value: function push() {
            var bullets = this.getBullets();
            this.game.geowar.socketHandler.push({ name: "playerFire", id: this.player.playerId, bullets: bullets });
        }
    }, {
        key: 'playPeerFire',
        value: function playPeerFire(bullets) {
            if (bullets && bullets.length > 0) {
                for (var i in bullets) {
                    var children = this.bulletGroup.children;
                    var found = false;
                    if (children && children.length > 0) {
                        for (var j in children) {
                            if (children[j].bid == bullets[i].bid) {
                                children[j].body.x = bullets[i].x;
                                children[j].body.y = bullets[i].y;
                                children[j].body.angle = bullets[i].angle;
                                found = true;
                                break;
                            }
                        }
                    }
                    if (!found) {
                        var bullet = this.bulletGroup.getFirstDead();
                        if (bullet) {
                            bullet.bid = bullets[i].bid;
                            bullet.body.x = bullets[i].x;
                            bullet.body.y = bullets[i].y;
                            bullet.body.angle = bullets[i].angle;
                            bullet.revive();
                        } else {
                            var bullet = this.bulletGroup.create(bullets[i].x, bullets[i].y, this.bmd);
                            bullet.bid = bullets[i].bid;
                            bullet.isBullet = true;
                            this.game.physics.p2.enable(bullet);
                            bullet.body.angle = bullets[i].angle;
                            bullet.checkWorldBounds = true;
                            bullet.body.collideWorldBounds = false;
                            bullet.events.onOutOfBounds.add(this.bulletOutOfBounds, this);
                            this.collideSetting(bullet);
                        }
                    }
                }
                var children = this.bulletGroup.children;
                if (children && children.length > 0) {
                    for (var i in children) {
                        var found = false;
                        for (var j in bullets) {
                            if (children[i].bid == bullets[j].bid) {
                                found = true;
                                break;
                            }
                        }
                        if (!found) {
                            children[i].kill();
                        }
                    }
                }
            } else {
                var children = this.bulletGroup.children;
                if (children && children.length > 0) {
                    for (var i in children) {
                        children[i].kill();
                    }
                }
            }
        }
    }, {
        key: 'getBullets',
        value: function getBullets() {
            var bullets = this.bulletGroup.children;
            var json = [];
            if (bullets && bullets.length > 0) {
                for (var i in bullets) {
                    if (bullets[i].alive) {
                        json.push({ bid: bullets[i].bid, x: bullets[i].x, y: bullets[i].y, angle: bullets[i].angle });
                    }
                }
            }
            return json;
        }
    }, {
        key: 'collideSetting',
        value: function collideSetting(bullet) {
            bullet.body.setCollisionGroup(this.game.geowar.bulletCollisionGroup);
            bullet.body.collides([this.game.geowar.playerCollisionGroup, this.game.geowar.bulletCollisionGroup]);
            bullet.body.onBeginContact.add(this.bulletContact, this);
        }
    }, {
        key: 'bulletContact',
        value: function bulletContact(otherBody) {
            //only kill the player
            if (otherBody && otherBody.sprite && typeof otherBody.sprite.getType == 'function' && /Player/i.test(otherBody.sprite.getType())) {
                if (otherBody.sprite != this.player) {
                    //ai not kill ai
                    if (this.player.createStateMachine && otherBody.sprite.createStateMachine) {
                        return;
                    }
                    //not kill, directly kick player out
                    this.game.geowar.socketHandler.push({ name: "connection", id: otherBody.sprite.playerId, "type": "playerKilled" });
                    otherBody.sprite.destroy();
                }
            }
        }
    }, {
        key: 'bulletOutOfBounds',
        value: function bulletOutOfBounds(bullet) {
            bullet.kill();
        }
    }, {
        key: 'initBulletVelocity',
        value: function initBulletVelocity() {
            var angle = this.player.body.angle;
            var v = 400;
            var x = Math.sin(angle * Math.PI / 180) * this.speed;
            var y = Math.cos(angle * Math.PI / 180) * this.speed * -1;
            return {
                x: x,
                y: y
            };
        }
    }, {
        key: 'initBulletPosition',
        value: function initBulletPosition() {
            var headToBodyCenter = this.player.width / 2 + 5;
            var angle = this.player.body.angle;
            var x = this.player.x + Math.sin(angle * Math.PI / 180) * headToBodyCenter;
            var y = this.player.y - Math.cos(angle * Math.PI / 180) * headToBodyCenter;
            return {
                x: x,
                y: y
            };
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            this.bulletGroup.destroy();
        }
    }]);

    return Weapon;
})();

exports['default'] = Weapon;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../../common/CanvasHelper.js":2,"../../common/Utils.js":3,"../../textures/weapons/weapon.json":32}],17:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _WeaponJs = require('./Weapon.js');

var _WeaponJs2 = _interopRequireDefault(_WeaponJs);

var _DirtWeaponJs = require('./DirtWeapon.js');

var _DirtWeaponJs2 = _interopRequireDefault(_DirtWeaponJs);

var WeaponFactory = (function () {
    function WeaponFactory(game) {
        _classCallCheck(this, WeaponFactory);

        this.weapon_type = ['basic', 'dirt'];

        this.game = game;
    }

    _createClass(WeaponFactory, [{
        key: 'createWeapon',
        value: function createWeapon(type, player) {
            switch (type) {
                case "basic":
                    return new _WeaponJs2['default'](this.game, player);
                case "dirt":
                    return new _DirtWeaponJs2['default'](this.game, player);
                default:
                    return new _WeaponJs2['default'](this.game, player);
            }
        }
    }]);

    return WeaponFactory;
})();

exports['default'] = WeaponFactory;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3dlYXBvbnMvV2VhcG9uRmFjdG9yeS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7d0JBQW1CLGFBQWE7Ozs7NEJBQ1QsaUJBQWlCOzs7O0lBRW5CLGFBQWE7QUFJbkIsYUFKTSxhQUFhLENBSWxCLElBQUksRUFBRTs4QkFKRCxhQUFhOzthQUU5QixXQUFXLEdBQUcsQ0FBQyxPQUFPLEVBQUMsTUFBTSxDQUFDOztBQUcxQixZQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztLQUNwQjs7aUJBTmdCLGFBQWE7O2VBU2xCLHNCQUFDLElBQUksRUFBQyxNQUFNLEVBQUU7QUFDdEIsb0JBQU8sSUFBSTtBQUNQLHFCQUFLLE9BQU87QUFDVCwyQkFBTywwQkFBVyxJQUFJLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQUEsQUFDdkMscUJBQUssTUFBTTtBQUNSLDJCQUFPLDhCQUFlLElBQUksQ0FBQyxJQUFJLEVBQUMsTUFBTSxDQUFDLENBQUM7QUFBQSxBQUMzQztBQUNHLDJCQUFPLDBCQUFXLElBQUksQ0FBQyxJQUFJLEVBQUMsTUFBTSxDQUFDLENBQUM7QUFBQSxhQUMxQztTQUNKOzs7V0FsQmdCLGFBQWE7OztxQkFBYixhQUFhIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9wcmVmYWJzL3dlYXBvbnMvV2VhcG9uRmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBXZWFwb24gZnJvbSAnLi9XZWFwb24uanMnO1xuaW1wb3J0IERpcnRXZWFwb24gZnJvbSAnLi9EaXJ0V2VhcG9uLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV2VhcG9uRmFjdG9yeSB7XG5cbiAgICB3ZWFwb25fdHlwZSA9IFsnYmFzaWMnLCdkaXJ0J107XG5cbiAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgfVxuXG5cbiAgICBjcmVhdGVXZWFwb24odHlwZSxwbGF5ZXIpIHtcbiAgICAgICAgc3dpdGNoKHR5cGUpe1xuICAgICAgICAgICAgY2FzZSBcImJhc2ljXCIgOiBcbiAgICAgICAgICAgICAgIHJldHVybiBuZXcgV2VhcG9uKHRoaXMuZ2FtZSxwbGF5ZXIpO1xuICAgICAgICAgICAgY2FzZSBcImRpcnRcIiA6IFxuICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEaXJ0V2VhcG9uKHRoaXMuZ2FtZSxwbGF5ZXIpO1xuICAgICAgICAgICAgZGVmYXVsdCA6IFxuICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXZWFwb24odGhpcy5nYW1lLHBsYXllcik7XG4gICAgICAgIH0gXG4gICAgfVxuXG59Il19
},{"./DirtWeapon.js":14,"./Weapon.js":16}],18:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
      value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ConnectionHandler = (function () {
      function ConnectionHandler(game) {
            _classCallCheck(this, ConnectionHandler);

            this.game = game;
      }

      _createClass(ConnectionHandler, [{
            key: "handle",
            value: function handle(data) {
                  if (!this.game.geowar.players) {
                        this.game.geowar.players = {};
                  }
                  if (data.type === 'connected') {
                        this.game.geowar.socketReady = true;
                        //reconnected
                        if (this.game.geowar.currentPlayer.playerId) {
                              this.game.geowar.currentPlayer.prePlayerId = this.game.geowar.currentPlayer.playerId;
                              //notify peer destory previous player
                              this.game.geowar.socketHandler.push({ name: "connection", id: this.game.geowar.currentPlayer.prePlayerId, "type": "playerKilled" });
                        }
                        //set current player id
                        this.game.geowar.currentPlayer.playerId = data.id;
                        //add to player map
                        this.game.geowar.players[data.id] = {
                              sprite: this.game.geowar.currentPlayer
                        };
                        console.log('current playerId = ' + this.game.geowar.currentPlayer.playerId + ' connected');
                  } else if (data.type === 'disconnected') {
                        var needDestroy = true;
                        if (this.game.geowar.currentPlayer.playerId == data.id) {
                              needDestroy = false;
                              this.game.geowar.socketReady = false;
                              console.log('current playerId = ' + data.id + ' disconnected');
                        } else if (this.game.geowar.currentPlayer.prePlayerId == data.id) {
                              needDestroy = false;
                              console.log('current old playerId = ' + data.id + ' disconnected');
                        }
                        if (this.game.geowar.players[data.id]) {
                              if (needDestroy) {
                                    this.game.geowar.players[data.id].sprite.destroy();
                                    console.log('peer playerId = ' + data.id + ' disconnected');
                              }
                              delete this.game.geowar.players[data.id];
                        }
                  } else if (data.type === 'playerKilled') {
                        if (this.game.geowar.players[data.id]) {
                              this.game.geowar.players[data.id].sprite.destroy();
                              delete this.game.geowar.players[data.id];
                              console.log('playerId = ' + data.id + ' killed');
                              if (this.game.geowar.currentPlayer.playerId == data.id) {
                                    this.game.geowar.socketReady = false;
                              }
                        }
                  }
            }
      }]);

      return ConnectionHandler;
})();

exports["default"] = ConnectionHandler;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvQ29ubmVjdGlvbkhhbmRsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixpQkFBaUI7QUFFckIsZUFGSSxpQkFBaUIsQ0FFcEIsSUFBSSxFQUFFO2tDQUZILGlCQUFpQjs7QUFHMUIsZ0JBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO09BQ3RCOzttQkFKYyxpQkFBaUI7O21CQU0xQixnQkFBQyxJQUFJLEVBQUU7QUFDUCxzQkFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtBQUN6Qiw0QkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLEVBQUUsQ0FBQzttQkFDbkM7QUFDRCxzQkFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtBQUN6Qiw0QkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzs7QUFFcEMsNEJBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRTtBQUN2QyxrQ0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDOztBQUVyRixrQ0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxZQUFZLEVBQUUsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEVBQUUsTUFBTSxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7eUJBQ3pJOztBQUVELDRCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7O0FBRWxELDRCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO0FBQzlCLG9DQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYTt5QkFDM0MsQ0FBQztBQUNGLCtCQUFPLENBQUMsR0FBRyxDQUFDLHFCQUFxQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLENBQUM7bUJBQ2pHLE1BQ0ksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsRUFBRTtBQUNqQyw0QkFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLDRCQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLEVBQUUsRUFBRTtBQUNsRCx5Q0FBVyxHQUFHLEtBQUssQ0FBQztBQUNwQixrQ0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztBQUNyQyxxQ0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLGVBQWUsQ0FBQyxDQUFDO3lCQUNwRSxNQUNJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRSxFQUFFO0FBQzFELHlDQUFXLEdBQUcsS0FBSyxDQUFDO0FBQ3BCLHFDQUFPLENBQUMsR0FBRyxDQUFDLHlCQUF5QixHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsZUFBZSxDQUFDLENBQUM7eUJBQ3hFO0FBQ0QsNEJBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNqQyxrQ0FBSSxXQUFXLEVBQUU7QUFDWCx3Q0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbkQsMkNBQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxlQUFlLENBQUMsQ0FBQzsrQkFDakU7QUFDRCxxQ0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO3lCQUM5QzttQkFFTixNQUNJLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLEVBQUU7QUFDakMsNEJBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNqQyxrQ0FBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDbkQscUNBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUN6QyxxQ0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQztBQUNqRCxrQ0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7QUFDbEQsd0NBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7K0JBQzFDO3lCQUNOO21CQUNOO2FBQ047OzthQXhEYyxpQkFBaUI7OztxQkFBakIsaUJBQWlCIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvQ29ubmVjdGlvbkhhbmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb25uZWN0aW9uSGFuZGxlciB7XG5cbiAgICAgIGNvbnN0cnVjdG9yKGdhbWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2FtZSA9IGdhbWU7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuZ2FtZS5nZW93YXIucGxheWVycykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmdlb3dhci5zb2NrZXRSZWFkeSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAvL3JlY29ubmVjdGVkXG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lLmdlb3dhci5jdXJyZW50UGxheWVyLnBsYXllcklkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXIucHJlUGxheWVySWQgPSB0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXIucGxheWVySWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdGlmeSBwZWVyIGRlc3RvcnkgcHJldmlvdXMgcGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZ2Vvd2FyLnNvY2tldEhhbmRsZXIucHVzaCh7IG5hbWU6IFwiY29ubmVjdGlvblwiLCBpZDogdGhpcy5nYW1lLmdlb3dhci5jdXJyZW50UGxheWVyLnByZVBsYXllcklkLCBcInR5cGVcIjogXCJwbGF5ZXJLaWxsZWRcIiB9KTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIC8vc2V0IGN1cnJlbnQgcGxheWVyIGlkXG4gICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXIucGxheWVySWQgPSBkYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gcGxheWVyIG1hcFxuICAgICAgICAgICAgICAgICAgdGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ByaXRlOiB0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXJcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY3VycmVudCBwbGF5ZXJJZCA9ICcgKyB0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXIucGxheWVySWQgKyAnIGNvbm5lY3RlZCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSAnZGlzY29ubmVjdGVkJykge1xuICAgICAgICAgICAgICAgICAgdmFyIG5lZWREZXN0cm95ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdhbWUuZ2Vvd2FyLmN1cnJlbnRQbGF5ZXIucGxheWVySWQgPT0gZGF0YS5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmVlZERlc3Ryb3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5nZW93YXIuc29ja2V0UmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjdXJyZW50IHBsYXllcklkID0gJyArIGRhdGEuaWQgKyAnIGRpc2Nvbm5lY3RlZCcpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5nYW1lLmdlb3dhci5jdXJyZW50UGxheWVyLnByZVBsYXllcklkID09IGRhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5lZWREZXN0cm95ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnY3VycmVudCBvbGQgcGxheWVySWQgPSAnICsgZGF0YS5pZCArICcgZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmVlZERlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5nZW93YXIucGxheWVyc1tkYXRhLmlkXS5zcHJpdGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3BlZXIgcGxheWVySWQgPSAnICsgZGF0YS5pZCArICcgZGlzY29ubmVjdGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdwbGF5ZXJLaWxsZWQnKSB7XG4gICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZ2Vvd2FyLnBsYXllcnNbZGF0YS5pZF0uc3ByaXRlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmdhbWUuZ2Vvd2FyLnBsYXllcnNbZGF0YS5pZF07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygncGxheWVySWQgPSAnICsgZGF0YS5pZCArICcga2lsbGVkJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nYW1lLmdlb3dhci5jdXJyZW50UGxheWVyLnBsYXllcklkID09IGRhdGEuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5nZW93YXIuc29ja2V0UmVhZHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgIH1cbn0iXX0=
},{}],19:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
      value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PlayerFireHandler = (function () {
      function PlayerFireHandler(game) {
            _classCallCheck(this, PlayerFireHandler);

            this.game = game;
      }

      _createClass(PlayerFireHandler, [{
            key: "handle",
            value: function handle(data) {
                  if (this.game.geowar.players[data.id]) {
                        var peerPlayer = this.game.geowar.players[data.id];
                        //cache the peer player pos meta data and update in update method.
                        peerPlayer.fire = {
                              bullets: data.bullets
                        };
                  }
            }
      }]);

      return PlayerFireHandler;
})();

exports["default"] = PlayerFireHandler;
module.exports = exports["default"];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvUGxheWVyRmlyZUhhbmRsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixpQkFBaUI7QUFFckIsZUFGSSxpQkFBaUIsQ0FFcEIsSUFBSSxFQUFFO2tDQUZILGlCQUFpQjs7QUFHMUIsZ0JBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO09BQ3RCOzttQkFKYyxpQkFBaUI7O21CQU0xQixnQkFBQyxJQUFJLEVBQUU7QUFDUCxzQkFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ25DLDRCQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUVuRCxrQ0FBVSxDQUFDLElBQUksR0FBRztBQUNkLHFDQUFPLEVBQUksSUFBSSxDQUFDLE9BQU87eUJBQzFCLENBQUM7bUJBQ0w7YUFDTjs7O2FBZGMsaUJBQWlCOzs7cUJBQWpCLGlCQUFpQiIsImZpbGUiOiJEOi9hcXVhL2dlb3dhci9zcmMvc29ja2V0L1BsYXllckZpcmVIYW5kbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxheWVyRmlyZUhhbmRsZXIge1xuXG4gICAgICBjb25zdHJ1Y3RvcihnYW1lKSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgfVxuXG4gICAgICBoYW5kbGUoZGF0YSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZ2FtZS5nZW93YXIucGxheWVyc1tkYXRhLmlkXSkge1xuICAgICAgICAgICAgICAgIHZhciBwZWVyUGxheWVyID0gdGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdOyBcbiAgICAgICAgICAgICAgICAvL2NhY2hlIHRoZSBwZWVyIHBsYXllciBwb3MgbWV0YSBkYXRhIGFuZCB1cGRhdGUgaW4gdXBkYXRlIG1ldGhvZC4gXG4gICAgICAgICAgICAgICAgcGVlclBsYXllci5maXJlID0ge1xuICAgICAgICAgICAgICAgICAgICBidWxsZXRzIDogIGRhdGEuYnVsbGV0cyBcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgfVxuXG59Il19
},{}],20:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _prefabsPlayersPlayerFactoryJs = require('../prefabs/players/PlayerFactory.js');

var _prefabsPlayersPlayerFactoryJs2 = _interopRequireDefault(_prefabsPlayersPlayerFactoryJs);

var PlayerMoveHandler = (function () {
    function PlayerMoveHandler(game) {
        _classCallCheck(this, PlayerMoveHandler);

        this.game = game;
        this.playerFactory = new _prefabsPlayersPlayerFactoryJs2['default'](this.game);
    }

    _createClass(PlayerMoveHandler, [{
        key: 'handle',
        value: function handle(data) {
            if (this.game.geowar.players[data.id]) {
                var peerPlayer = this.game.geowar.players[data.id];
                //cache the peer player pos meta data and update in update method.
                peerPlayer.pos = {
                    x: data.x,
                    y: data.y,
                    angle: data.angle,
                    timestamp: new Date().getTime()
                };
            } else {
                var peerPlayer = this.playerFactory.createPeerPlayer(data);
                this.game.add.existing(peerPlayer);
                this.game.geowar.playersGroup.add(peerPlayer);
                //cache peer player
                this.game.geowar.players[data.id] = {
                    sprite: peerPlayer
                };
            }
        }
    }]);

    return PlayerMoveHandler;
})();

exports['default'] = PlayerMoveHandler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvUGxheWVyTW92ZUhhbmRsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OzZDQUEwQixxQ0FBcUM7Ozs7SUFFMUMsaUJBQWlCO0FBRXJCLGFBRkksaUJBQWlCLENBRXBCLElBQUksRUFBRTs4QkFGSCxpQkFBaUI7O0FBRzFCLFlBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFlBQUksQ0FBQyxhQUFhLEdBQUcsK0NBQWtCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN2RDs7aUJBTGMsaUJBQWlCOztlQU8xQixnQkFBQyxJQUFJLEVBQUU7QUFDUCxnQkFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFO0FBQ25DLG9CQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDOztBQUVuRCwwQkFBVSxDQUFDLEdBQUcsR0FBRztBQUNiLHFCQUFDLEVBQUcsSUFBSSxDQUFDLENBQUM7QUFDVixxQkFBQyxFQUFHLElBQUksQ0FBQyxDQUFDO0FBQ1YseUJBQUssRUFBRyxJQUFJLENBQUMsS0FBSztBQUNsQiw2QkFBUyxFQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFO2lCQUNuQyxDQUFDO2FBQ0wsTUFDRztBQUNBLG9CQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzNELG9CQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7QUFDbkMsb0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRTlDLG9CQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHO0FBQy9CLDBCQUFNLEVBQUcsVUFBVTtpQkFDdkIsQ0FBQzthQUNMO1NBQ047OztXQTNCYyxpQkFBaUI7OztxQkFBakIsaUJBQWlCIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvUGxheWVyTW92ZUhhbmRsZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUGxheWVyRmFjdG9yeSBmcm9tICcuLi9wcmVmYWJzL3BsYXllcnMvUGxheWVyRmFjdG9yeS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllck1vdmVIYW5kbGVyIHtcblxuICAgICAgY29uc3RydWN0b3IoZ2FtZSkge1xuICAgICAgICAgICAgdGhpcy5nYW1lID0gZ2FtZTtcbiAgICAgICAgICAgIHRoaXMucGxheWVyRmFjdG9yeSA9IG5ldyBQbGF5ZXJGYWN0b3J5KHRoaXMuZ2FtZSk7XG4gICAgICB9XG5cbiAgICAgIGhhbmRsZShkYXRhKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5nYW1lLmdlb3dhci5wbGF5ZXJzW2RhdGEuaWRdKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBlZXJQbGF5ZXIgPSB0aGlzLmdhbWUuZ2Vvd2FyLnBsYXllcnNbZGF0YS5pZF07IFxuICAgICAgICAgICAgICAgIC8vY2FjaGUgdGhlIHBlZXIgcGxheWVyIHBvcyBtZXRhIGRhdGEgYW5kIHVwZGF0ZSBpbiB1cGRhdGUgbWV0aG9kLiBcbiAgICAgICAgICAgICAgICBwZWVyUGxheWVyLnBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgeCA6IGRhdGEueCxcbiAgICAgICAgICAgICAgICAgICAgeSA6IGRhdGEueSxcbiAgICAgICAgICAgICAgICAgICAgYW5nbGUgOiBkYXRhLmFuZ2xlLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAgOiBuZXcgRGF0ZSgpLmdldFRpbWUoKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgIHZhciBwZWVyUGxheWVyID0gdGhpcy5wbGF5ZXJGYWN0b3J5LmNyZWF0ZVBlZXJQbGF5ZXIoZGF0YSk7XG4gICAgICAgICAgICAgICAgdGhpcy5nYW1lLmFkZC5leGlzdGluZyhwZWVyUGxheWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmdhbWUuZ2Vvd2FyLnBsYXllcnNHcm91cC5hZGQocGVlclBsYXllcik7XG4gICAgICAgICAgICAgICAgLy9jYWNoZSBwZWVyIHBsYXllclxuICAgICAgICAgICAgICAgIHRoaXMuZ2FtZS5nZW93YXIucGxheWVyc1tkYXRhLmlkXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgIHNwcml0ZSA6IHBlZXJQbGF5ZXIgXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgIH1cblxufSJdfQ==
},{"../prefabs/players/PlayerFactory.js":11}],21:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _ConnectionHandlerJs = require('./ConnectionHandler.js');

var _ConnectionHandlerJs2 = _interopRequireDefault(_ConnectionHandlerJs);

var _PlayerMoveHandlerJs = require('./PlayerMoveHandler.js');

var _PlayerMoveHandlerJs2 = _interopRequireDefault(_PlayerMoveHandlerJs);

var _PlayerFireHandlerJs = require('./PlayerFireHandler.js');

var _PlayerFireHandlerJs2 = _interopRequireDefault(_PlayerFireHandlerJs);

var SocketHandler = (function () {
    function SocketHandler(sio, game) {
        _classCallCheck(this, SocketHandler);

        this.sio = sio;
        this.game = game;
        var that = this;
        this.initHandlers(this.game);
        this.sio.on('pull', function (data) {
            that.update(data, that);
        });
    }

    _createClass(SocketHandler, [{
        key: 'push',
        value: function push(data) {
            if (this.game.geowar.socketReady) {
                this.sio.emit('push', data);
            }
        }
    }, {
        key: 'update',
        value: function update(data, that) {
            if (data.name) {
                this.handlers[data.name].handle(data);
            }
        }
    }, {
        key: 'initHandlers',
        value: function initHandlers(game) {
            this.handlers = {};
            this.handlers.connection = new _ConnectionHandlerJs2['default'](game);
            this.handlers.playerMove = new _PlayerMoveHandlerJs2['default'](game);
            this.handlers.playerFire = new _PlayerFireHandlerJs2['default'](game);
        }
    }]);

    return SocketHandler;
})();

exports['default'] = SocketHandler;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvU29ja2V0SGFuZGxlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7bUNBQThCLHdCQUF3Qjs7OzttQ0FDeEIsd0JBQXdCOzs7O21DQUN4Qix3QkFBd0I7Ozs7SUFFakMsYUFBYTtBQUNuQixhQURNLGFBQWEsQ0FDbEIsR0FBRyxFQUFFLElBQUksRUFBRTs4QkFETixhQUFhOztBQUUxQixZQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztBQUNmLFlBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLFlBQUksSUFBSSxHQUFHLElBQUksQ0FBQztBQUNoQixZQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUM3QixZQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxJQUFJLEVBQUU7QUFDaEMsZ0JBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzNCLENBQUMsQ0FBQztLQUNOOztpQkFUZ0IsYUFBYTs7ZUFXMUIsY0FBQyxJQUFJLEVBQUU7QUFDUCxnQkFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7QUFDOUIsb0JBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMvQjtTQUNKOzs7ZUFFSyxnQkFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFO0FBQ2YsZ0JBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNYLG9CQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDekM7U0FDSjs7O2VBR1csc0JBQUMsSUFBSSxFQUFFO0FBQ2YsZ0JBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDO0FBQ25CLGdCQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsR0FBRyxxQ0FBc0IsSUFBSSxDQUFDLENBQUM7QUFDdkQsZ0JBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLHFDQUFzQixJQUFJLENBQUMsQ0FBQztBQUN2RCxnQkFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEdBQUcscUNBQXNCLElBQUksQ0FBQyxDQUFDO1NBQzFEOzs7V0E3QmdCLGFBQWE7OztxQkFBYixhQUFhIiwiZmlsZSI6IkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zb2NrZXQvU29ja2V0SGFuZGxlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25uZWN0aW9uSGFuZGxlciBmcm9tICcuL0Nvbm5lY3Rpb25IYW5kbGVyLmpzJztcbmltcG9ydCBQbGF5ZXJNb3ZlSGFuZGxlciBmcm9tICcuL1BsYXllck1vdmVIYW5kbGVyLmpzJztcbmltcG9ydCBQbGF5ZXJGaXJlSGFuZGxlciBmcm9tICcuL1BsYXllckZpcmVIYW5kbGVyLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU29ja2V0SGFuZGxlciB7XG4gICAgY29uc3RydWN0b3Ioc2lvLCBnYW1lKSB7XG4gICAgICAgIHRoaXMuc2lvID0gc2lvO1xuICAgICAgICB0aGlzLmdhbWUgPSBnYW1lO1xuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICAgIHRoaXMuaW5pdEhhbmRsZXJzKHRoaXMuZ2FtZSk7XG4gICAgICAgIHRoaXMuc2lvLm9uKCdwdWxsJywgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHRoYXQudXBkYXRlKGRhdGEsIHRoYXQpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdXNoKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2FtZS5nZW93YXIuc29ja2V0UmVhZHkpIHtcbiAgICAgICAgICAgIHRoaXMuc2lvLmVtaXQoJ3B1c2gnLCBkYXRhKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZShkYXRhLCB0aGF0KSB7XG4gICAgICAgIGlmIChkYXRhLm5hbWUpIHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlcnNbZGF0YS5uYW1lXS5oYW5kbGUoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGluaXRIYW5kbGVycyhnYW1lKSB7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5oYW5kbGVycy5jb25uZWN0aW9uID0gbmV3IENvbm5lY3Rpb25IYW5kbGVyKGdhbWUpO1xuICAgICAgICB0aGlzLmhhbmRsZXJzLnBsYXllck1vdmUgPSBuZXcgUGxheWVyTW92ZUhhbmRsZXIoZ2FtZSk7XG4gICAgICAgIHRoaXMuaGFuZGxlcnMucGxheWVyRmlyZSA9IG5ldyBQbGF5ZXJGaXJlSGFuZGxlcihnYW1lKTtcbiAgICB9XG59Il19
},{"./ConnectionHandler.js":18,"./PlayerFireHandler.js":19,"./PlayerMoveHandler.js":20}],22:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Boot = (function () {
    function Boot() {
        _classCallCheck(this, Boot);
    }

    _createClass(Boot, [{
        key: 'preload',
        value: function preload() {
            this.load.image('preloader', 'assets/images/loading_bar.png');
        }
    }, {
        key: 'create',
        value: function create() {
            //namespace
            this.game.geowar = {
                server: 'http://www.yamixed.com/nodejs',
                initBulletCount: 100,
                enablePredict: false,
                debug: localStorage.getItem('geowar.debug') == 'true' ? true : false,
                log: function log(msg) {
                    if (this.debug) {
                        console.log(msg + ' : ' + new Date().getTime());
                    }
                }
            };
            this.game.input.maxPointers = 1;
            //make sure the game running even loose focus
            this.game.stage.disableVisibilityChange = true;
            this.game.state.start('preload');
        }
    }]);

    return Boot;
})();

exports['default'] = Boot;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zdGF0ZXMvQm9vdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLElBQUk7YUFBSixJQUFJOzhCQUFKLElBQUk7OztpQkFBSixJQUFJOztlQUNkLG1CQUFHO0FBQ04sZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1NBQ2pFOzs7ZUFFSyxrQkFBRzs7QUFFTCxnQkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUc7QUFDZixzQkFBTSxFQUFHLCtCQUErQjtBQUN4QywrQkFBZSxFQUFHLEdBQUc7QUFDckIsNkJBQWEsRUFBRyxLQUFLO0FBQ3JCLHFCQUFLLEVBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEtBQUs7QUFDckUsbUJBQUcsRUFBRyxhQUFTLEdBQUcsRUFBQztBQUNoQix3QkFBRyxJQUFJLENBQUMsS0FBSyxFQUFDO0FBQ1osK0JBQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEtBQUssR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7cUJBQ2pEO2lCQUNIO2FBQ0osQ0FBQztBQUNGLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDOztBQUVoQyxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsdUJBQXVCLEdBQUcsSUFBSSxDQUFDO0FBQy9DLGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDcEM7OztXQXRCZ0IsSUFBSTs7O3FCQUFKLElBQUkiLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3N0YXRlcy9Cb290LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQm9vdCB7XG4gICAgcHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5sb2FkLmltYWdlKCdwcmVsb2FkZXInLCAnYXNzZXRzL2ltYWdlcy9sb2FkaW5nX2Jhci5wbmcnKTtcbiAgICB9XG5cbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIC8vbmFtZXNwYWNlXG4gICAgICAgIHRoaXMuZ2FtZS5nZW93YXIgPSB7XG4gICAgICAgICAgICBzZXJ2ZXIgOiAnaHR0cDovL3d3dy55YW1peGVkLmNvbS9ub2RlanMnLFxuICAgICAgICAgICAgaW5pdEJ1bGxldENvdW50IDogMTAwLFxuICAgICAgICAgICAgZW5hYmxlUHJlZGljdCA6IGZhbHNlLFxuICAgICAgICAgICAgZGVidWcgOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2Vvd2FyLmRlYnVnJykgPT0gJ3RydWUnID8gdHJ1ZSA6IGZhbHNlLFxuICAgICAgICAgICAgbG9nIDogZnVuY3Rpb24obXNnKXtcbiAgICAgICAgICAgICAgIGlmKHRoaXMuZGVidWcpe1xuICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhtc2cgKyAnIDogJyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpKTsgXG4gICAgICAgICAgICAgICB9ICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH07IFxuICAgICAgICB0aGlzLmdhbWUuaW5wdXQubWF4UG9pbnRlcnMgPSAxO1xuICAgICAgICAvL21ha2Ugc3VyZSB0aGUgZ2FtZSBydW5uaW5nIGV2ZW4gbG9vc2UgZm9jdXNcbiAgICAgICAgdGhpcy5nYW1lLnN0YWdlLmRpc2FibGVWaXNpYmlsaXR5Q2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5nYW1lLnN0YXRlLnN0YXJ0KCdwcmVsb2FkJyk7XG4gICAgfVxufSJdfQ==
},{}],23:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _commonUtilsJs = require('../common/Utils.js');

var _commonUtilsJs2 = _interopRequireDefault(_commonUtilsJs);

var _prefabsPlayersPlayerFactoryJs = require('../prefabs/players/PlayerFactory.js');

var _prefabsPlayersPlayerFactoryJs2 = _interopRequireDefault(_prefabsPlayersPlayerFactoryJs);

var _prefabsBackgroundBackgroundFactoryJs = require('../prefabs/background/BackgroundFactory.js');

var _prefabsBackgroundBackgroundFactoryJs2 = _interopRequireDefault(_prefabsBackgroundBackgroundFactoryJs);

var _prefabsUiNumberBoxJs = require('../prefabs/ui/NumberBox.js');

var _prefabsUiNumberBoxJs2 = _interopRequireDefault(_prefabsUiNumberBoxJs);

var _socketSocketHandlerJs = require("../socket/SocketHandler.js");

var _socketSocketHandlerJs2 = _interopRequireDefault(_socketSocketHandlerJs);

var Game = (function (_Phaser$State) {
    _inherits(Game, _Phaser$State);

    function Game() {
        _classCallCheck(this, Game);

        _get(Object.getPrototypeOf(Game.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Game, [{
        key: 'create',
        value: function create() {
            //stage
            this.game.world.setBounds(0, 0, 2000, 1500);
            this.game.physics.startSystem(Phaser.Physics.P2JS);
            this.game.stage.backgroundColor = '#282626';
            //factories
            this.backgroundFactory = new _prefabsBackgroundBackgroundFactoryJs2['default'](this.game);
            this.playerFactory = new _prefabsPlayersPlayerFactoryJs2['default'](this.game);
            //background
            this.backgroundFactory.createBackground('baisc', 100, this.game.world.width, this.game.world.height);
            //setup UI
            this.setupUI();
            //player group
            var playersGroup = this.game.add.group();
            this.game.geowar.playersGroup = playersGroup;
            //collision group
            this.game.geowar.playerCollisionGroup = this.game.physics.p2.createCollisionGroup();
            this.game.geowar.bulletCollisionGroup = this.game.physics.p2.createCollisionGroup();
            //after create new collision group update the group to collide with bounds
            this.game.physics.p2.updateBoundsCollisionGroup();
            //player
            this.player = this.playerFactory.createPlayer('', {
                replay: this.replaySignal,
                kill: this.killSignal
            });
            this.game.add.existing(this.player);
            playersGroup.add(this.player);
            this.game.camera.follow(this.player);
            //cache current player
            this.game.geowar.currentPlayer = this.player;
            //set up socket
            this.game.geowar.socketHandler = new _socketSocketHandlerJs2['default'](io(this.game.geowar.server), this.game);
            //create AI players
            this.createAIPlayers();
        }
    }, {
        key: 'setupUI',
        value: function setupUI() {
            this.UILayer = this.add.group();
            // this.bloodUI = new NumberBox(this.game, 50, 20, 'Blood', 20, { font: "15px Arial", align: "center", fill: "red" } , 0);
            // this.UILayer.add(this.bloodUI);

            //ammos
            this.ammoUI = new _prefabsUiNumberBoxJs2['default'](this.game, 50, 20, 'Ammos', this.game.geowar.initBulletCount, { font: "15px Arial", align: "center", fill: "#fff" }, 0);
            this.UILayer.add(this.ammoUI);
            //kills
            this.killUI = new _prefabsUiNumberBoxJs2['default'](this.game, 150, 20, 'Kills', 0, { font: "15px Arial", align: "center", fill: "#fff" }, 0);
            this.UILayer.add(this.killUI);

            this.UILayer.fixedToCamera = true;

            this.addSignals();
        }
    }, {
        key: 'update',
        value: function update() {
            this.ammoUI.setValue(this.game.geowar.currentPlayer.weapon.bulletCounts);
        }
    }, {
        key: 'addSignals',
        value: function addSignals() {
            this.addReplaySignal();
            this.addKillSignal();
        }
    }, {
        key: 'addReplaySignal',
        value: function addReplaySignal() {
            this.replaySignal = new Phaser.Signal();
            this.replaySignal.addOnce(this.popupReplayBtn, this);
        }
    }, {
        key: 'addKillSignal',
        value: function addKillSignal() {
            this.killSignal = new Phaser.Signal();
            this.killSignal.add(this.updateKillCount, this);
        }
    }, {
        key: 'updateKillCount',
        value: function updateKillCount() {
            this.killUI.setValue(this.killUI.getValue() + 1);
        }
    }, {
        key: 'popupReplayBtn',
        value: function popupReplayBtn() {
            this.replay = this.add.sprite(this.game.width / 2, this.game.height / 2, 'replay');
            this.replay.anchor.setTo(0.5, 0.5);
            this.replay.scale.setTo(0.1, 0.1);
            this.replay.inputEnabled = true;
            this.replay.events.onInputDown.add(this.startReplay, this);
            this.replay.events.onInputOver.add(this.mouseOver, this);
            this.replay.events.onInputOut.add(this.mouseOut, this);
            this.replay.fixedToCamera = true;
        }
    }, {
        key: 'startReplay',
        value: function startReplay() {
            window.location.reload();
        }
    }, {
        key: 'mouseOver',
        value: function mouseOver() {
            this.game.canvas.style.cursor = 'pointer';
        }
    }, {
        key: 'mouseOut',
        value: function mouseOut() {
            this.game.canvas.style.cursor = 'default';
        }
    }, {
        key: 'createAIPlayers',
        value: function createAIPlayers() {
            var aiGroup = this.game.add.group();
            for (var i = 0; i < Math.floor(Math.random() * 8 + 3); i++) {
                var aiPlayer = this.playerFactory.createAIPlayer('triangle');
                aiGroup.add(aiPlayer);
            }
        }
    }]);

    return Game;
})(Phaser.State);

exports['default'] = Game;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
},{"../common/Utils.js":3,"../prefabs/background/BackgroundFactory.js":7,"../prefabs/players/PlayerFactory.js":11,"../prefabs/ui/NumberBox.js":13,"../socket/SocketHandler.js":21}],24:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var Preload = (function () {
    function Preload() {
        _classCallCheck(this, Preload);

        this.asset = null;
        this.ready = false;
    }

    _createClass(Preload, [{
        key: 'preload',
        value: function preload() {}
    }, {
        key: 'create',
        value: function create() {
            this.game.stage.backgroundColor = '#282626';
            this.asset = this.add.sprite(this.game.width / 2, this.game.height / 2, 'preloader');
            this.asset.anchor.setTo(0.5, 0.5);
            this.asset.scale.setTo(0.3, 0.3);

            this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
            this.load.setPreloadSprite(this.asset);

            this.load.image('logo', 'assets/images/logo.png');
            this.load.image('play', 'assets/images/play.png');
            this.load.image('replay', 'assets/images/replay.png');

            //start load
            this.load.start();
        }
    }, {
        key: 'update',
        value: function update() {

            if (this.ready) {
                this.game.state.start('startScreen');
            }
        }
    }, {
        key: 'onLoadComplete',
        value: function onLoadComplete() {
            this.ready = true;
        }
    }]);

    return Preload;
})();

exports['default'] = Preload;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zdGF0ZXMvUHJlbG9hZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0lBQXFCLE9BQU87QUFFYixhQUZNLE9BQU8sR0FFVjs4QkFGRyxPQUFPOztBQUdwQixZQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztBQUNsQixZQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztLQUN0Qjs7aUJBTGdCLE9BQU87O2VBT2pCLG1CQUFHLEVBQ1Q7OztlQUVLLGtCQUFHO0FBQ0wsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsR0FBRyxTQUFTLENBQUM7QUFDNUMsZ0JBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztBQUNyRixnQkFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNsQyxnQkFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzs7QUFFakMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzVELGdCQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzs7QUFFdkMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDO0FBQ2xELGdCQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsd0JBQXdCLENBQUMsQ0FBQztBQUNsRCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLDBCQUEwQixDQUFDLENBQUM7OztBQUd0RCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNyQjs7O2VBRUssa0JBQUc7O0FBRUwsZ0JBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtBQUNaLG9CQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDeEM7U0FFSjs7O2VBRWEsMEJBQUc7QUFDYixnQkFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7U0FDckI7OztXQXJDZ0IsT0FBTzs7O3FCQUFQLE9BQU8iLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3N0YXRlcy9QcmVsb2FkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJlbG9hZCB7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5hc3NldCA9IG51bGw7XG4gICAgICAgIHRoaXMucmVhZHkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcmVsb2FkKCkge1xuICAgIH1cblxuICAgIGNyZWF0ZSgpIHtcbiAgICAgICAgdGhpcy5nYW1lLnN0YWdlLmJhY2tncm91bmRDb2xvciA9ICcjMjgyNjI2JztcbiAgICAgICAgdGhpcy5hc3NldCA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiwgJ3ByZWxvYWRlcicpO1xuICAgICAgICB0aGlzLmFzc2V0LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgIHRoaXMuYXNzZXQuc2NhbGUuc2V0VG8oMC4zLCAwLjMpO1xuXG4gICAgICAgIHRoaXMubG9hZC5vbkxvYWRDb21wbGV0ZS5hZGRPbmNlKHRoaXMub25Mb2FkQ29tcGxldGUsIHRoaXMpO1xuICAgICAgICB0aGlzLmxvYWQuc2V0UHJlbG9hZFNwcml0ZSh0aGlzLmFzc2V0KTtcblxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ2xvZ28nLCAnYXNzZXRzL2ltYWdlcy9sb2dvLnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3BsYXknLCAnYXNzZXRzL2ltYWdlcy9wbGF5LnBuZycpO1xuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoJ3JlcGxheScsICdhc3NldHMvaW1hZ2VzL3JlcGxheS5wbmcnKTtcblxuICAgICAgICAvL3N0YXJ0IGxvYWRcbiAgICAgICAgdGhpcy5sb2FkLnN0YXJ0KCk7XG4gICAgfVxuXG4gICAgdXBkYXRlKCkge1xuXG4gICAgICAgIGlmICh0aGlzLnJlYWR5KSB7XG4gICAgICAgICAgICB0aGlzLmdhbWUuc3RhdGUuc3RhcnQoJ3N0YXJ0U2NyZWVuJyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIG9uTG9hZENvbXBsZXRlKCkge1xuICAgICAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgICB9XG59Il19
},{}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var StartScreen = (function () {
    function StartScreen() {
        _classCallCheck(this, StartScreen);
    }

    _createClass(StartScreen, [{
        key: 'create',
        value: function create() {
            this.game.stage.backgroundColor = '#282626';

            this.logo = this.add.sprite(this.game.width / 2, this.game.height / 2 - 100, 'logo');
            this.logo.anchor.setTo(0.5, 0.5);
            this.logo.scale.setTo(0.8, 0.8);

            this.play = this.add.sprite(this.game.width / 2, this.game.height / 2, 'play');
            this.play.anchor.setTo(0.5, 0.5);
            this.play.scale.setTo(0.3, 0.3);
            this.play.inputEnabled = true;
            this.play.events.onInputDown.add(this.startPlay, this);
            this.play.events.onInputOver.add(this.mouseOver, this);
            this.play.events.onInputOut.add(this.mouseOut, this);

            this.tips = this.add.text(this.game.width / 2, this.game.height / 2 + 100, 'Use [ ↑→↓← ] to move and [ space ] to shoot', { font: "17px Arial", align: "center", fill: "#fff" });
            this.tips.anchor.setTo(0.5, 0.5);

            this.author = this.add.text(this.game.width - 180, this.game.height - 17, 'Design and made by Aqua, Email: true2green@qq.com', { font: "13px Arial", align: "center", fill: "#fff" });
            this.author.anchor.setTo(0.5, 0.5);
        }
    }, {
        key: 'startPlay',
        value: function startPlay() {
            this.state.start('game');
        }
    }, {
        key: 'mouseOver',
        value: function mouseOver() {
            this.game.canvas.style.cursor = 'pointer';
        }
    }, {
        key: 'mouseOut',
        value: function mouseOut() {
            this.game.canvas.style.cursor = 'default';
        }
    }]);

    return StartScreen;
})();

exports['default'] = StartScreen;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkQ6L2FxdWEvZ2Vvd2FyL3NyYy9zdGF0ZXMvU3RhcnRTY3JlZW4uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztJQUFxQixXQUFXO2FBQVgsV0FBVzs4QkFBWCxXQUFXOzs7aUJBQVgsV0FBVzs7ZUFDdEIsa0JBQUc7QUFDTCxnQkFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQzs7QUFFNUMsZ0JBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDckYsZ0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDakMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7O0FBRWhDLGdCQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDL0UsZ0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDakMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEMsZ0JBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztBQUM5QixnQkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3ZELGdCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDdkQsZ0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQzs7QUFHckQsZ0JBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsNkNBQTZDLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDakwsZ0JBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7O0FBRWpDLGdCQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsbURBQW1ELEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFDdEwsZ0JBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDdEM7OztlQUVRLHFCQUFHO0FBQ1IsZ0JBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzVCOzs7ZUFFUSxxQkFBRztBQUNSLGdCQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQztTQUM3Qzs7O2VBRU8sb0JBQUc7QUFDUCxnQkFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7U0FDN0M7OztXQWxDZ0IsV0FBVzs7O3FCQUFYLFdBQVciLCJmaWxlIjoiRDovYXF1YS9nZW93YXIvc3JjL3N0YXRlcy9TdGFydFNjcmVlbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXJ0U2NyZWVuIHtcbiAgICBjcmVhdGUoKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5zdGFnZS5iYWNrZ3JvdW5kQ29sb3IgPSAnIzI4MjYyNic7XG5cbiAgICAgICAgdGhpcy5sb2dvID0gdGhpcy5hZGQuc3ByaXRlKHRoaXMuZ2FtZS53aWR0aCAvIDIsIHRoaXMuZ2FtZS5oZWlnaHQgLyAyIC0gMTAwLCAnbG9nbycpO1xuICAgICAgICB0aGlzLmxvZ28uYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICAgICAgdGhpcy5sb2dvLnNjYWxlLnNldFRvKDAuOCwgMC44KTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMucGxheSA9IHRoaXMuYWRkLnNwcml0ZSh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiwgJ3BsYXknKTtcbiAgICAgICAgdGhpcy5wbGF5LmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG4gICAgICAgIHRoaXMucGxheS5zY2FsZS5zZXRUbygwLjMsIDAuMyk7XG4gICAgICAgIHRoaXMucGxheS5pbnB1dEVuYWJsZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLnBsYXkuZXZlbnRzLm9uSW5wdXREb3duLmFkZCh0aGlzLnN0YXJ0UGxheSwgdGhpcyk7XG4gICAgICAgIHRoaXMucGxheS5ldmVudHMub25JbnB1dE92ZXIuYWRkKHRoaXMubW91c2VPdmVyLCB0aGlzKTtcbiAgICAgICAgdGhpcy5wbGF5LmV2ZW50cy5vbklucHV0T3V0LmFkZCh0aGlzLm1vdXNlT3V0LCB0aGlzKTtcbiAgICAgICAgXG5cbiAgICAgICAgdGhpcy50aXBzID0gdGhpcy5hZGQudGV4dCh0aGlzLmdhbWUud2lkdGggLyAyLCB0aGlzLmdhbWUuaGVpZ2h0IC8gMiArIDEwMCwgJ1VzZSBbIOKGkeKGkuKGk+KGkCBdIHRvIG1vdmUgYW5kIFsgc3BhY2UgXSB0byBzaG9vdCcsIHsgZm9udDogXCIxN3B4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9KTtcbiAgICAgICAgdGhpcy50aXBzLmFuY2hvci5zZXRUbygwLjUsIDAuNSk7XG5cbiAgICAgICAgdGhpcy5hdXRob3IgPSB0aGlzLmFkZC50ZXh0KHRoaXMuZ2FtZS53aWR0aCAtIDE4MCwgdGhpcy5nYW1lLmhlaWdodCAtIDE3LCAnRGVzaWduIGFuZCBtYWRlIGJ5IEFxdWEsIEVtYWlsOiB0cnVlMmdyZWVuQHFxLmNvbScsIHsgZm9udDogXCIxM3B4IEFyaWFsXCIsIGFsaWduOiBcImNlbnRlclwiLCBmaWxsOiBcIiNmZmZcIiB9KTtcbiAgICAgICAgdGhpcy5hdXRob3IuYW5jaG9yLnNldFRvKDAuNSwgMC41KTtcbiAgICB9XG5cbiAgICBzdGFydFBsYXkoKSB7XG4gICAgICAgIHRoaXMuc3RhdGUuc3RhcnQoJ2dhbWUnKTtcbiAgICB9XG5cbiAgICBtb3VzZU92ZXIoKSB7XG4gICAgICAgIHRoaXMuZ2FtZS5jYW52YXMuc3R5bGUuY3Vyc29yID0gJ3BvaW50ZXInO1xuICAgIH1cblxuICAgIG1vdXNlT3V0KCkge1xuICAgICAgICB0aGlzLmdhbWUuY2FudmFzLnN0eWxlLmN1cnNvciA9ICdkZWZhdWx0JztcbiAgICB9XG5cbn0gIl19
},{}],26:[function(require,module,exports){
module.exports={
    "body": {
        "ctxProp" : {
            "fillStyle" : "#424141"
        },
        "draw": [
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            },
            {
                "drawType": "fillRect",
                "x": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "y": "${Math.floor(Math.random() * (canvas.width - 20))}",
                "width" : "${Math.floor(Math.random() * 20)}",
                "height" : "${Math.floor(Math.random() * 20)}"
            }
        ]
    }
}
},{}],27:[function(require,module,exports){
module.exports={
    "head": {
        "style": "stroke",
        "ctxProp" : {
            "lineWith" : "2"
        },
        "draw": [
            {
                "drawType": "move",
                "x": "${canvas.width/2}",
                "y": "0"
            },
            {
                "drawType": "line",
                "x": "${canvas.width/2}",
                "y": "${canvas.height - canvas.width}"
            }
        ]
    },
    "body": {
        "style": "fill",
        "draw": [
            {
                "drawType": "arc",
                "x": "${canvas.width/2}",
                "y": "${canvas.height - canvas.width + (canvas.width/2)}",
                "radius" : "${canvas.width/2 - 1}",
                "arc" : "${2 * Math.PI}"
            },
        ]
    }
}
},{}],28:[function(require,module,exports){
module.exports={
    "head": {
        "style": "stroke",
        "ctxProp" : {
            "lineWith" : "2"
        },
        "draw": [
            {
                "drawType": "move",
                "x": "${canvas.width/2}",
                "y": "0"
            },
            {
                "drawType": "line",
                "x": "${canvas.width/2}",
                "y": "${canvas.height - canvas.width}"
            }
        ]
    },
    "body": {
        "style": "fill",
        "draw": [
            {
                "drawType": "move",
                "x": "${canvas.width/2}",
                "y": "${canvas.height - canvas.width}"
            },
            {
                "drawType": "line",
                "x": "0",
                "y": "${canvas.height}"
            },
            {
                "drawType": "line",
                "x": "${canvas.width}",
                "y": "${canvas.height}"
            }
        ]
    }
}
},{}],29:[function(require,module,exports){
module.exports={
    "head": {
        "style": "stroke",
        "ctxProp" : {
            "lineWith" : "2"
        },
        "draw": [
            {
                "drawType": "move",
                "x": "${canvas.width/2}",
                "y": "0"
            },
            {
                "drawType": "line",
                "x": "${canvas.width/2}",
                "y": "${canvas.height - canvas.width}"
            }
        ]
    },
    "body": {
        "style": "fill",
        "draw": [
            {
                "drawType": "move",
                "x": "0",
                "y": "${canvas.height - canvas.width}"
            },
            {
                "drawType": "line",
                "x": "0",
                "y": "${canvas.height}"
            },
            {
                "drawType": "line",
                "x": "${canvas.width}",
                "y": "${canvas.height}"
            },
            {
                "drawType": "line",
                "x": "${canvas.width}",
                "y": "${canvas.height - canvas.width}"
            }
        ]
    }
}
},{}],30:[function(require,module,exports){
module.exports={
    "body": {
        "style": "fill",
        "draw": [
            {
                "drawType": "move",
                "x": "0",
                "y": "0"
            },
            {
                "drawType": "line",
                "x": "12",
                "y": "6"
            },
            {
                "drawType": "line",
                "x": "0",
                "y": "12"
            }
        ]
    }
}
},{}],31:[function(require,module,exports){
module.exports={
    "body": {
        "style": "fill",
        "draw": [
            {
                "drawType": "arc",
                "x": "6",
                "y": "6",
                "radius" : "6",
                "arc" : "${2 * Math.PI}"
            }
        ]
    }
}
},{}],32:[function(require,module,exports){
arguments[4][31][0].apply(exports,arguments)
},{"dup":31}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
